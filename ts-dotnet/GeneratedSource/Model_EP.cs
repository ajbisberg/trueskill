// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.1810.501 at 5:16 PM on Tuesday, November 5, 2019.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> black_drawMargin_2__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> black_drawMargin_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> black_performance_F;
		/// <summary>Message from use of 'black_performance'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> black_performance_use_B;
		/// <summary>Field backing the blackPlayer property</summary>
		private int[][] BlackPlayer;
		public PointMass<int[][]> blackPlayer_marginal;
		/// <summary>True if Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11 has executed. Set this to false to force re-execution of Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11</summary>
		public bool Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone;
		/// <summary>True if Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27 has executed. Set this to false to force re-execution of Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27</summary>
		public bool Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone;
		/// <summary>True if Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27 has performed initialisation. Set this to false to force re-execution of Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27</summary>
		public bool Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isInitialised;
		/// <summary>True if Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28 has executed. Set this to false to force re-execution of Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28</summary>
		public bool Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone;
		/// <summary>True if Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22 has executed. Set this to false to force re-execution of Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22</summary>
		public bool Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isDone;
		/// <summary>True if Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22 has performed initialisation. Set this to false to force re-execution of Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22</summary>
		public bool Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised;
		/// <summary>True if Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23 has executed. Set this to false to force re-execution of Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23</summary>
		public bool Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isDone;
		/// <summary>True if Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23 has performed initialisation. Set this to false to force re-execution of Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23</summary>
		public bool Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised;
		/// <summary>True if Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24 has executed. Set this to false to force re-execution of Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24</summary>
		public bool Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone;
		/// <summary>True if Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24 has performed initialisation. Set this to false to force re-execution of Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24</summary>
		public bool Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isInitialised;
		/// <summary>True if Changed_blackPlayer has executed. Set this to false to force re-execution of Changed_blackPlayer</summary>
		public bool Changed_blackPlayer_isDone;
		/// <summary>True if Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26 has executed. Set this to false to force re-execution of Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26</summary>
		public bool Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isDone;
		/// <summary>True if Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26 has performed initialisation. Set this to false to force re-execution of Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26</summary>
		public bool Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised;
		/// <summary>True if Changed_drawMarginChangePrecision has executed. Set this to false to force re-execution of Changed_drawMarginChangePrecision</summary>
		public bool Changed_drawMarginChangePrecision_isDone;
		/// <summary>True if Changed_drawMarginMean_drawMarginPrecision_firstYear has executed. Set this to false to force re-execution of Changed_drawMarginMean_drawMarginPrecision_firstYear</summary>
		public bool Changed_drawMarginMean_drawMarginPrecision_firstYear_isDone;
		/// <summary>True if Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19 has executed. Set this to false to force re-execution of Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19</summary>
		public bool Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isDone;
		/// <summary>True if Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19 has performed initialisation. Set this to false to force re-execution of Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19</summary>
		public bool Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised;
		/// <summary>True if Changed_drawMarginMean_drawMarginPrecision has executed. Set this to false to force re-execution of Changed_drawMarginMean_drawMarginPrecision</summary>
		public bool Changed_drawMarginMean_drawMarginPrecision_isDone;
		/// <summary>True if Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25 has executed. Set this to false to force re-execution of Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25</summary>
		public bool Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isDone;
		/// <summary>True if Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25 has performed initialisation. Set this to false to force re-execution of Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25</summary>
		public bool Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised;
		/// <summary>True if Changed_drawMarginMean has executed. Set this to false to force re-execution of Changed_drawMarginMean</summary>
		public bool Changed_drawMarginMean_isDone;
		/// <summary>True if Changed_drawMarginPrecision has executed. Set this to false to force re-execution of Changed_drawMarginPrecision</summary>
		public bool Changed_drawMarginPrecision_isDone;
		/// <summary>True if Changed_firstYear has executed. Set this to false to force re-execution of Changed_firstYear</summary>
		public bool Changed_firstYear_isDone;
		/// <summary>True if Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21 has executed. Set this to false to force re-execution of Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21</summary>
		public bool Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isDone;
		/// <summary>True if Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21 has performed initialisation. Set this to false to force re-execution of Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21</summary>
		public bool Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised;
		/// <summary>True if Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20 has executed. Set this to false to force re-execution of Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20</summary>
		public bool Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isDone;
		/// <summary>True if Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20 has performed initialisation. Set this to false to force re-execution of Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20</summary>
		public bool Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised;
		/// <summary>True if Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17 has executed. Set this to false to force re-execution of Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17</summary>
		public bool Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isDone;
		/// <summary>True if Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17 has performed initialisation. Set this to false to force re-execution of Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17</summary>
		public bool Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised;
		/// <summary>True if Changed_nGames has executed. Set this to false to force re-execution of Changed_nGames</summary>
		public bool Changed_nGames_isDone;
		/// <summary>True if Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13 has executed. Set this to false to force re-execution of Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13</summary>
		public bool Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isDone;
		/// <summary>True if Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13 has performed initialisation. Set this to false to force re-execution of Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13</summary>
		public bool Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised;
		/// <summary>True if Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16 has executed. Set this to false to force re-execution of Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16</summary>
		public bool Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isDone;
		/// <summary>True if Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16 has performed initialisation. Set this to false to force re-execution of Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16</summary>
		public bool Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised;
		/// <summary>True if Changed_nGames_outcome has executed. Set this to false to force re-execution of Changed_nGames_outcome</summary>
		public bool Changed_nGames_outcome_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12</summary>
		public bool Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12</summary>
		public bool Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised;
		/// <summary>True if Changed_outcome has executed. Set this to false to force re-execution of Changed_outcome</summary>
		public bool Changed_outcome_isDone;
		/// <summary>True if Changed_performancePrecision has executed. Set this to false to force re-execution of Changed_performancePrecision</summary>
		public bool Changed_performancePrecision_isDone;
		/// <summary>True if Changed_skillChangePrecision has executed. Set this to false to force re-execution of Changed_skillChangePrecision</summary>
		public bool Changed_skillChangePrecision_isDone;
		/// <summary>True if Changed_whitePlayer has executed. Set this to false to force re-execution of Changed_whitePlayer</summary>
		public bool Changed_whitePlayer_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public DistributionStructArray<Gaussian,double> drawMargin_0_player_0__F_reduced;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_depth1_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_depth1_F;
		public DistributionStructArray<Gaussian,double>[][] drawMargin_depth1_uses_B;
		public DistributionStructArray<Gaussian,double>[][] drawMargin_depth1_uses_F;
		/// <summary>Buffer for GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian, double>, Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_depth1_uses_F_year__0__marginal;
		/// <summary>Buffer for GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian, double>, Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_depth1_uses_F_year__1__marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_itemblackPlayer_year__game__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_itemwhitePlayer_year__game__F;
		/// <summary>Message to marginal of 'drawMargin'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_marginal_F;
		/// <summary>Message from use of 'drawMargin'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_use_B;
		/// <summary>Messages from use of 'drawMargin'</summary>
		public Gaussian[][][] drawMargin_uses_B;
		/// <summary>Messages to use of 'drawMargin'</summary>
		public Gaussian[][][] drawMargin_uses_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_year_player_0__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_year_player_0__player_0__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_year_player_0__player_1__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_yearMinus1_player_0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> drawMargin_yearMinus1_player_0__player_1__B;
		/// <summary>Field backing the drawMarginChangePrecision property</summary>
		private double DrawMarginChangePrecision;
		public Gamma drawMarginChangePrecision_marginal;
		/// <summary>Field backing the drawMarginMean property</summary>
		private double DrawMarginMean;
		public Gaussian drawMarginMean_marginal;
		/// <summary>Field backing the drawMarginPrecision property</summary>
		private double DrawMarginPrecision;
		public Gamma drawMarginPrecision_marginal;
		/// <summary>Field backing the firstYear property</summary>
		private int[] FirstYear;
		public PointMass<int[]> firstYear_marginal;
		/// <summary>The constant 'isFirstYear'</summary>
		public bool[][] isFirstYear;
		/// <summary>Field backing the nGames property</summary>
		private int[] NGames;
		public PointMass<int[]> nGames_marginal;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the outcome property</summary>
		private int[][] Outcome;
		public PointMass<int[][]> outcome_marginal;
		/// <summary>Field backing the performancePrecision property</summary>
		private double PerformancePrecision;
		public Gamma performancePrecision_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_depth1_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_depth1_F;
		public DistributionStructArray<Gaussian,double>[][] skill_depth1_uses_B;
		public DistributionStructArray<Gaussian,double>[][] skill_depth1_uses_F;
		/// <summary>Buffer for GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian, double>, Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_depth1_uses_F_year__0__marginal;
		/// <summary>Buffer for GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian, double>, Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_depth1_uses_F_year__1__marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_itemblackPlayer_year__game__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_itemblackPlayer_year__game__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_itemwhitePlayer_year__game__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_itemwhitePlayer_year__game__F;
		/// <summary>Message to marginal of 'skill'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_marginal_F;
		/// <summary>Message from use of 'skill'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_use_B;
		/// <summary>Messages from use of 'skill'</summary>
		public Gaussian[][][] skill_uses_B;
		/// <summary>Messages to use of 'skill'</summary>
		public Gaussian[][][] skill_uses_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_year_player_0__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_year_player_0__player_1__F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_yearMinus1_player_0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> skill_yearMinus1_player_0__player_1__B;
		/// <summary>Field backing the skillChangePrecision property</summary>
		private double SkillChangePrecision;
		public Gamma skillChangePrecision_marginal;
		/// <summary>Buffer for DoubleIsBetweenOp.XAverageConditional</summary>
		public double[][] true_logZ;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool4_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble28_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble28_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble30_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble30_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble33_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble33_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble34_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble34_F;
		/// <summary>The constant 'vGaussian1'</summary>
		public Gaussian vGaussian1;
		/// <summary>The constant 'vGaussian2'</summary>
		public Gaussian vGaussian2;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_delta_0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_delta_1__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_delta_2__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_delta_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_delta_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_drawMargin_0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_drawMargin_1__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_drawMargin_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_performance_F;
		/// <summary>Message from use of 'white_performance'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> white_performance_use_B;
		/// <summary>Message to marginal of 'whiteAdvantage'</summary>
		public Gaussian whiteAdvantage_marginal_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gaussian></summary>
		public Gaussian whiteAdvantage_rep_B_toDef;
		public DistributionStructArray<Gaussian,double> whiteAdvantage_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gaussian></summary>
		public Gaussian whiteAdvantage_rep_F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> whiteAdvantage_rep_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gaussian></summary>
		public DistributionStructArray<Gaussian,double> whiteAdvantage_rep_rep_B_toDef;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> whiteAdvantage_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gaussian></summary>
		public DistributionStructArray<Gaussian,double> whiteAdvantage_rep_rep_F_marginal;
		/// <summary>Field backing the whitePlayer property</summary>
		private int[][] WhitePlayer;
		public PointMass<int[][]> whitePlayer_marginal;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'blackPlayer'</summary>
		public int[][] blackPlayer
		{
			get {
				return this.BlackPlayer;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'blackPlayer\'");
				}
				this.BlackPlayer = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
				this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = false;
				this.Changed_blackPlayer_isDone = false;
				this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = false;
				this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
				this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isDone = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isDone = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone = false;
				this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised = false;
				this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'drawMarginChangePrecision'</summary>
		public double drawMarginChangePrecision
		{
			get {
				return this.DrawMarginChangePrecision;
			}
			set {
				if (this.DrawMarginChangePrecision!=value) {
					this.DrawMarginChangePrecision = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = false;
					this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = false;
					this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
					this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised = false;
					this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
					this.Changed_drawMarginChangePrecision_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'drawMarginMean'</summary>
		public double drawMarginMean
		{
			get {
				return this.DrawMarginMean;
			}
			set {
				if (this.DrawMarginMean!=value) {
					this.DrawMarginMean = value;
					this.numberOfIterationsDone = 0;
					this.Changed_drawMarginMean_drawMarginPrecision_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isDone = false;
					this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = false;
					this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_firstYear_isDone = false;
					this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isDone = false;
					this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
					this.Changed_drawMarginMean_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'drawMarginPrecision'</summary>
		public double drawMarginPrecision
		{
			get {
				return this.DrawMarginPrecision;
			}
			set {
				if (this.DrawMarginPrecision!=value) {
					this.DrawMarginPrecision = value;
					this.numberOfIterationsDone = 0;
					this.Changed_drawMarginMean_drawMarginPrecision_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isDone = false;
					this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = false;
					this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_firstYear_isDone = false;
					this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isDone = false;
					this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
					this.Changed_drawMarginPrecision_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'firstYear'</summary>
		public int[] firstYear
		{
			get {
				return this.FirstYear;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'firstYear\'");
				}
				this.FirstYear = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
				this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = false;
				this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = false;
				this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
				this.Changed_firstYear_isDone = false;
				this.Changed_drawMarginMean_drawMarginPrecision_firstYear_isDone = false;
				this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isDone = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isDone = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isDone = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isDone = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isDone = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone = false;
				this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isDone = false;
				this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'nGames'</summary>
		public int[] nGames
		{
			get {
				return this.NGames;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'nGames\'");
				}
				this.NGames = value;
				this.numberOfIterationsDone = 0;
				this.Changed_nGames_outcome_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
				this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = false;
				this.Changed_nGames_isDone = false;
				this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isDone = false;
				this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isDone = false;
				this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isDone = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isDone = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isDone = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isDone = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone = false;
				this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised = false;
				this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'outcome'</summary>
		public int[][] outcome
		{
			get {
				return this.Outcome;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'outcome\'");
				}
				this.Outcome = value;
				this.numberOfIterationsDone = 0;
				this.Changed_nGames_outcome_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
				this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = false;
				this.Changed_outcome_isDone = false;
				this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isDone = false;
				this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
				this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isInitialised = false;
				this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised = false;
				this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'performancePrecision'</summary>
		public double performancePrecision
		{
			get {
				return this.PerformancePrecision;
			}
			set {
				if (this.PerformancePrecision!=value) {
					this.PerformancePrecision = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = false;
					this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = false;
					this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
					this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isDone = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isDone = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone = false;
					this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised = false;
					this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isInitialised = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
					this.Changed_performancePrecision_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'skillChangePrecision'</summary>
		public double skillChangePrecision
		{
			get {
				return this.SkillChangePrecision;
			}
			set {
				if (this.SkillChangePrecision!=value) {
					this.SkillChangePrecision = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = false;
					this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = false;
					this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
					this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isInitialised = false;
					this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised = false;
					this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isInitialised = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
					this.Changed_skillChangePrecision_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'whitePlayer'</summary>
		public int[][] whitePlayer
		{
			get {
				return this.WhitePlayer;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'whitePlayer\'");
				}
				this.WhitePlayer = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = false;
				this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = false;
				this.Changed_whitePlayer_isDone = false;
				this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = false;
				this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = false;
				this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isDone = false;
				this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isDone = false;
				this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone = false;
				this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised = false;
				this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isInitialised = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'blackPlayer' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> BlackPlayerMarginal()
		{
			return this.blackPlayer_marginal;
		}

		/// <summary>Computations that depend on the observed value of blackPlayer</summary>
		private void Changed_blackPlayer()
		{
			if (this.Changed_blackPlayer_isDone) {
				return ;
			}
			this.blackPlayer_marginal = new PointMass<int[][]>(this.BlackPlayer);
			this.Changed_blackPlayer_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and firstYear and nGames and numberOfIterations and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11(int numberOfIterations)
		{
			if (this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone) {
				return ;
			}
			this.whiteAdvantage_marginal_F = Gaussian.Uniform();
			// Create array for replicates of 'black_drawMargin_1__B'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> black_drawMargin_1__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				// Create array for replicates of 'black_drawMargin_1__B'
				black_drawMargin_1__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					if (this.Outcome[year][game]==1) {
						black_drawMargin_1__B[year][game] = Gaussian.Uniform();
					}
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'whiteAdvantage_rep' from Replicate factor
				this.whiteAdvantage_rep_F_marginal = ReplicateOp_Divide.Marginal<Gaussian>(this.whiteAdvantage_rep_B_toDef, this.vGaussian1, this.whiteAdvantage_rep_F_marginal);
				for(int year = 0; year<10; year++) {
					// Message to 'whiteAdvantage_rep' from Replicate factor
					this.whiteAdvantage_rep_F[year] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.whiteAdvantage_rep_rep_B_toDef[year], this.whiteAdvantage_rep_F_marginal, year, this.whiteAdvantage_rep_F[year]);
				}
				for(int year = 10-1; year>=0; year--) {
					for(int player = 0; player<10; player++) {
						if (year>0) {
							// Message to 'skill_uses' from Replicate factor
							this.skill_uses_F[year][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[year][player], this.skill_year_player_0__F[year][player], 1, this.skill_uses_F[year][player][1]);
						}
						// Message to 'skill_depth1' from Copy factor
						this.skill_depth1_F[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_depth1_F[year][player], this.skill_uses_F[year][player][1]);
					}
					// Message to 'skill_depth1_uses' from Replicate factor
					this.skill_depth1_uses_F[year][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_F[year], 0, this.skill_depth1_uses_F[year][0]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'skill_itemwhitePlayer_year__game_' from Gaussian factor
						this.skill_itemwhitePlayer_year__game__B[year][game] = GaussianOpBase.MeanAverageConditional(this.white_performance_use_B[year][game], this.PerformancePrecision);
					}
					// Message to 'skill_depth1_uses' from GetItems factor
					this.skill_depth1_uses_B[year][0] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.skill_itemwhitePlayer_year__game__B[year], this.WhitePlayer[year], this.skill_depth1_uses_B[year][0]);
					// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
					this.skill_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_depth1_uses_F[year][0], this.skill_depth1_uses_B[year][0], this.skill_depth1_uses_F_year__0__marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
						this.skill_itemwhitePlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_itemwhitePlayer_year__game__B[year][game], this.skill_depth1_uses_F[year][0], this.skill_depth1_uses_F_year__0__marginal[year], this.WhitePlayer[year], game, this.skill_itemwhitePlayer_year__game__F[year][game]);
						// Message to 'white_performance' from Gaussian factor
						this.white_performance_F[year][game] = GaussianOpBase.SampleAverageConditional(this.skill_itemwhitePlayer_year__game__F[year][game], this.PerformancePrecision);
					}
					// Message to 'skill_depth1_uses' from Replicate factor
					this.skill_depth1_uses_F[year][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_F[year], 1, this.skill_depth1_uses_F[year][1]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'black_performance_use' from Difference factor
						this.black_performance_use_B[year][game] = DoublePlusOp.BAverageConditional(this.white_performance_F[year][game], this.vdouble28_B[year][game]);
						// Message to 'skill_itemblackPlayer_year__game_' from Gaussian factor
						this.skill_itemblackPlayer_year__game__B[year][game] = GaussianOpBase.MeanAverageConditional(this.black_performance_use_B[year][game], this.PerformancePrecision);
					}
					// Message to 'skill_depth1_uses' from GetItems factor
					this.skill_depth1_uses_B[year][1] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.skill_itemblackPlayer_year__game__B[year], this.BlackPlayer[year], this.skill_depth1_uses_B[year][1]);
					// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
					this.skill_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_depth1_uses_F[year][1], this.skill_depth1_uses_B[year][1], this.skill_depth1_uses_F_year__1__marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
						this.skill_itemblackPlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_itemblackPlayer_year__game__B[year][game], this.skill_depth1_uses_F[year][1], this.skill_depth1_uses_F_year__1__marginal[year], this.BlackPlayer[year], game, this.skill_itemblackPlayer_year__game__F[year][game]);
						// Message to 'black_performance' from Gaussian factor
						this.black_performance_F[year][game] = GaussianOpBase.SampleAverageConditional(this.skill_itemblackPlayer_year__game__F[year][game], this.PerformancePrecision);
						// Message to 'vdouble28' from Difference factor
						this.vdouble28_F[year][game] = DoublePlusOp.AAverageConditional(this.white_performance_F[year][game], this.black_performance_F[year][game]);
						// Message to 'whiteAdvantage_rep_rep' from Plus factor
						this.whiteAdvantage_rep_rep_B[year][game] = DoublePlusOp.BAverageConditional(this.white_delta_B[year][game], this.vdouble28_F[year][game]);
					}
					// Message to 'whiteAdvantage_rep_rep' from Replicate factor
					this.whiteAdvantage_rep_rep_B_toDef[year] = ReplicateOp_Divide.ToDef<Gaussian>(this.whiteAdvantage_rep_rep_B[year], this.whiteAdvantage_rep_rep_B_toDef[year]);
					// Message to 'skill_depth1' from Replicate factor
					this.skill_depth1_B[year] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_B[year]);
					for(int player = 0; player<10; player++) {
						// Message to 'skill_uses' from Copy factor
						this.skill_uses_B[year][player][1] = ArrayHelper.SetTo<Gaussian>(this.skill_uses_B[year][player][1], this.skill_depth1_B[year][player]);
						if (year>0) {
							// Message to 'skill_use' from Replicate factor
							this.skill_use_B[year][player] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.skill_uses_B[year][player], this.skill_use_B[year][player]);
							if (!this.isFirstYear[year][player]) {
								// Message to 'skill_yearMinus1_player_0__player_1_' from Gaussian factor
								this.skill_yearMinus1_player_0__player_1__B[year][player] = GaussianOpBase.MeanAverageConditional(this.skill_use_B[year][player], this.SkillChangePrecision);
								// Message to 'skill_yearMinus1_player_0_' from Copy factor
								this.skill_yearMinus1_player_0__B[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_yearMinus1_player_0__B[year][player], this.skill_yearMinus1_player_0__player_1__B[year][player]);
							}
							// Message to 'skill_uses' from Copy factor
							this.skill_uses_B[year-1][player][0] = ArrayHelper.SetTo<Gaussian>(this.skill_uses_B[year-1][player][0], this.skill_yearMinus1_player_0__B[year][player]);
						}
						if (year==0) {
							// Message to 'drawMargin_uses' from Replicate factor
							this.drawMargin_uses_F[0][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[0][player], this.drawMargin_0_player_0__F_reduced[year], 1, this.drawMargin_uses_F[0][player][1]);
						}
						if (year>0) {
							// Message to 'drawMargin_uses' from Replicate factor
							this.drawMargin_uses_F[year][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[year][player], this.drawMargin_year_player_0__F[year][player], 1, this.drawMargin_uses_F[year][player][1]);
						}
						// Message to 'drawMargin_depth1' from Copy factor
						this.drawMargin_depth1_F[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_depth1_F[year][player], this.drawMargin_uses_F[year][player][1]);
					}
					// Message to 'whiteAdvantage_rep_rep' from Replicate factor
					this.whiteAdvantage_rep_rep_F_marginal[year] = ReplicateOp_Divide.Marginal<Gaussian>(this.whiteAdvantage_rep_rep_B_toDef[year], this.whiteAdvantage_rep_F[year], this.whiteAdvantage_rep_rep_F_marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'whiteAdvantage_rep_rep' from Replicate factor
						this.whiteAdvantage_rep_rep_F[year][game] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.whiteAdvantage_rep_rep_B[year][game], this.whiteAdvantage_rep_rep_F_marginal[year], game, this.whiteAdvantage_rep_rep_F[year][game]);
						// Message to 'white_delta' from Plus factor
						this.white_delta_F[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble28_F[year][game], this.whiteAdvantage_rep_rep_F[year][game]);
						if (this.Outcome[year][game]==0) {
							// Message to 'vdouble30' from Plus factor
							this.vdouble30_F[year][game] = DoublePlusOp.SumAverageConditional(this.white_delta_F[year][game], this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
							// Message to 'vdouble30' from IsPositive factor
							this.vdouble30_B[year][game] = IsPositiveOp_Proper.XAverageConditional(this.vbool4_B[year][game], this.vdouble30_F[year][game]);
							// Message to 'white_drawMargin_0_' from Plus factor
							this.white_drawMargin_0__B[year][game] = DoublePlusOp.BAverageConditional(this.vdouble30_B[year][game], this.white_delta_F[year][game]);
							// Message to 'white_drawMargin' from Copy factor
							this.white_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_drawMargin_B[year][game], this.white_drawMargin_0__B[year][game]);
						}
					}
					// Message to 'drawMargin_depth1_uses' from GetItems factor
					this.drawMargin_depth1_uses_B[year][0] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.white_drawMargin_B[year], this.WhitePlayer[year], this.drawMargin_depth1_uses_B[year][0]);
					// Message to 'drawMargin_depth1_uses' from Replicate factor
					this.drawMargin_depth1_uses_F[year][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_F[year], 1, this.drawMargin_depth1_uses_F[year][1]);
					// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
					this.drawMargin_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.drawMargin_depth1_uses_F[year][1], this.drawMargin_depth1_uses_B[year][1], this.drawMargin_depth1_uses_F_year__1__marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
						this.drawMargin_itemblackPlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.black_drawMargin_B[year][game], this.drawMargin_depth1_uses_F[year][1], this.drawMargin_depth1_uses_F_year__1__marginal[year], this.BlackPlayer[year], game, this.drawMargin_itemblackPlayer_year__game__F[year][game]);
						if (this.Outcome[year][game]==1) {
							// Message to 'white_delta_1_' from IsBetween factor
							this.true_logZ[year][game] = DoubleIsBetweenOp.LogZ(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
							// Message to 'black_drawMargin_1_' from IsBetween factor
							black_drawMargin_1__B[year][game] = DoubleIsBetweenOp.UpperBoundAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
							// Message to 'black_drawMargin' from Copy factor
							this.black_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.black_drawMargin_B[year][game], black_drawMargin_1__B[year][game]);
						}
						if (this.Outcome[year][game]==2) {
							// Message to 'vdouble34' from Difference factor
							this.vdouble34_F[year][game] = DoublePlusOp.AAverageConditional(this.white_delta_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
							// Message to 'vdouble34' from IsPositive factor
							this.vdouble34_B[year][game] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.vdouble34_F[year][game]);
							// Message to 'black_drawMargin_2_' from Difference factor
							this.black_drawMargin_2__B[year][game] = DoublePlusOp.BAverageConditional(this.white_delta_F[year][game], this.vdouble34_B[year][game]);
							// Message to 'black_drawMargin' from Copy factor
							this.black_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.black_drawMargin_B[year][game], this.black_drawMargin_2__B[year][game]);
							// Message to 'white_delta_2_' from Difference factor
							this.white_delta_2__B[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble34_B[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
							// Message to 'white_delta' from Copy factor
							this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_2__B[year][game]);
						}
					}
					// Message to 'drawMargin_depth1_uses' from GetItems factor
					this.drawMargin_depth1_uses_B[year][1] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.black_drawMargin_B[year], this.BlackPlayer[year], this.drawMargin_depth1_uses_B[year][1]);
					// Message to 'drawMargin_depth1_uses' from Replicate factor
					this.drawMargin_depth1_uses_F[year][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_F[year], 0, this.drawMargin_depth1_uses_F[year][0]);
					// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
					this.drawMargin_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.drawMargin_depth1_uses_F[year][0], this.drawMargin_depth1_uses_B[year][0], this.drawMargin_depth1_uses_F_year__0__marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
						this.drawMargin_itemwhitePlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.white_drawMargin_B[year][game], this.drawMargin_depth1_uses_F[year][0], this.drawMargin_depth1_uses_F_year__0__marginal[year], this.WhitePlayer[year], game, this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
						if (this.Outcome[year][game]==0) {
							// Message to 'white_delta_0_' from Plus factor
							this.white_delta_0__B[year][game] = DoublePlusOp.AAverageConditional(this.vdouble30_B[year][game], this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
							// Message to 'white_delta' from Copy factor
							this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_0__B[year][game]);
						}
						if (this.Outcome[year][game]==1) {
							// Message to 'vdouble33' from Difference factor
							this.vdouble33_F[year][game] = DoublePlusOp.AAverageConditional(0.0, this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
							// Message to 'white_delta_1_' from IsBetween factor
							this.true_logZ[year][game] = DoubleIsBetweenOp.LogZ(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
							// Message to 'white_delta_1_' from IsBetween factor
							this.white_delta_1__B[year][game] = DoubleIsBetweenOp.XAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
							// Message to 'white_delta' from Copy factor
							this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_1__B[year][game]);
							// Message to 'vdouble33' from IsBetween factor
							this.vdouble33_B[year][game] = DoubleIsBetweenOp.LowerBoundAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
							// Message to 'white_drawMargin_1_' from Difference factor
							this.white_drawMargin_1__B[year][game] = DoublePlusOp.BAverageConditional(0.0, this.vdouble33_B[year][game]);
							// Message to 'white_drawMargin' from Copy factor
							this.white_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_drawMargin_B[year][game], this.white_drawMargin_1__B[year][game]);
						}
						// Message to 'vdouble28' from Plus factor
						this.vdouble28_B[year][game] = DoublePlusOp.AAverageConditional(this.white_delta_B[year][game], this.whiteAdvantage_rep_rep_F[year][game]);
						// Message to 'white_performance_use' from Difference factor
						this.white_performance_use_B[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble28_B[year][game], this.black_performance_F[year][game]);
					}
					// Message to 'drawMargin_depth1' from Replicate factor
					this.drawMargin_depth1_B[year] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_B[year]);
					for(int player = 0; player<10; player++) {
						// Message to 'drawMargin_uses' from Copy factor
						this.drawMargin_uses_B[year][player][1] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_uses_B[year][player][1], this.drawMargin_depth1_B[year][player]);
						if (year>0) {
							// Message to 'drawMargin_use' from Replicate factor
							this.drawMargin_use_B[year][player] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.drawMargin_uses_B[year][player], this.drawMargin_use_B[year][player]);
							if (!this.isFirstYear[year][player]) {
								// Message to 'drawMargin_yearMinus1_player_0__player_1_' from Gaussian factor
								this.drawMargin_yearMinus1_player_0__player_1__B[year][player] = GaussianOpBase.MeanAverageConditional(this.drawMargin_use_B[year][player], this.DrawMarginChangePrecision);
								// Message to 'drawMargin_yearMinus1_player_0_' from Copy factor
								this.drawMargin_yearMinus1_player_0__B[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_yearMinus1_player_0__B[year][player], this.drawMargin_yearMinus1_player_0__player_1__B[year][player]);
							}
							// Message to 'drawMargin_uses' from Copy factor
							this.drawMargin_uses_B[year-1][player][0] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_uses_B[year-1][player][0], this.drawMargin_yearMinus1_player_0__B[year][player]);
						}
					}
				}
				for(int year = 0; year<10; year++) { // broken
					if (year==0) {
						for(int player = 0; player<10; player++) {
							// Message to 'skill_uses' from Replicate factor
							this.skill_uses_F[0][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[0][player], this.vGaussian2, 1, this.skill_uses_F[0][player][1]);
						}
						year = 10-1;
						year = 10-1;
					}
				}
				for(int year = 0; year<10; year++) { // broken
					if (year==0) {
						for(int player = 0; player<10; player++) {
							// Message to 'skill_uses' from Replicate factor
							this.skill_uses_F[0][player][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[0][player], this.vGaussian2, 0, this.skill_uses_F[0][player][0]);
						}
						year = 10-1;
						year = 10-1;
					}
				}
				for(int year = 0; year<10; year++) {
					for(int player = 0; player<10; player++) {
						if (year>0) {
							if (!this.isFirstYear[year][player]) {
								// Message to 'skill_year_player_0__player_1_' from Gaussian factor
								this.skill_year_player_0__player_1__F[year][player] = GaussianOpBase.SampleAverageConditional(this.skill_uses_F[year-1][player][0], this.SkillChangePrecision);
								// Message to 'skill_year_player_0_' from Copy factor
								this.skill_year_player_0__F[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_year_player_0__F[year][player], this.skill_year_player_0__player_1__F[year][player]);
							}
							// Message to 'skill_uses' from Replicate factor
							this.skill_uses_F[year][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[year][player], this.skill_year_player_0__F[year][player], 1, this.skill_uses_F[year][player][1]);
						}
						// Message to 'skill_depth1' from Copy factor
						this.skill_depth1_F[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_depth1_F[year][player], this.skill_uses_F[year][player][1]);
					}
					// Message to 'skill_depth1_uses' from Replicate factor
					this.skill_depth1_uses_F[year][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_F[year], 0, this.skill_depth1_uses_F[year][0]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'skill_itemwhitePlayer_year__game_' from Gaussian factor
						this.skill_itemwhitePlayer_year__game__B[year][game] = GaussianOpBase.MeanAverageConditional(this.white_performance_use_B[year][game], this.PerformancePrecision);
					}
					// Message to 'skill_depth1_uses' from GetItems factor
					this.skill_depth1_uses_B[year][0] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.skill_itemwhitePlayer_year__game__B[year], this.WhitePlayer[year], this.skill_depth1_uses_B[year][0]);
					// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
					this.skill_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_depth1_uses_F[year][0], this.skill_depth1_uses_B[year][0], this.skill_depth1_uses_F_year__0__marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
						this.skill_itemwhitePlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_itemwhitePlayer_year__game__B[year][game], this.skill_depth1_uses_F[year][0], this.skill_depth1_uses_F_year__0__marginal[year], this.WhitePlayer[year], game, this.skill_itemwhitePlayer_year__game__F[year][game]);
						// Message to 'white_performance' from Gaussian factor
						this.white_performance_F[year][game] = GaussianOpBase.SampleAverageConditional(this.skill_itemwhitePlayer_year__game__F[year][game], this.PerformancePrecision);
					}
					// Message to 'skill_depth1_uses' from Replicate factor
					this.skill_depth1_uses_F[year][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_F[year], 1, this.skill_depth1_uses_F[year][1]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'black_performance_use' from Difference factor
						this.black_performance_use_B[year][game] = DoublePlusOp.BAverageConditional(this.white_performance_F[year][game], this.vdouble28_B[year][game]);
						// Message to 'skill_itemblackPlayer_year__game_' from Gaussian factor
						this.skill_itemblackPlayer_year__game__B[year][game] = GaussianOpBase.MeanAverageConditional(this.black_performance_use_B[year][game], this.PerformancePrecision);
					}
					// Message to 'skill_depth1_uses' from GetItems factor
					this.skill_depth1_uses_B[year][1] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.skill_itemblackPlayer_year__game__B[year], this.BlackPlayer[year], this.skill_depth1_uses_B[year][1]);
					// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
					this.skill_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_depth1_uses_F[year][1], this.skill_depth1_uses_B[year][1], this.skill_depth1_uses_F_year__1__marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
						this.skill_itemblackPlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_itemblackPlayer_year__game__B[year][game], this.skill_depth1_uses_F[year][1], this.skill_depth1_uses_F_year__1__marginal[year], this.BlackPlayer[year], game, this.skill_itemblackPlayer_year__game__F[year][game]);
						// Message to 'black_performance' from Gaussian factor
						this.black_performance_F[year][game] = GaussianOpBase.SampleAverageConditional(this.skill_itemblackPlayer_year__game__F[year][game], this.PerformancePrecision);
						// Message to 'vdouble28' from Difference factor
						this.vdouble28_F[year][game] = DoublePlusOp.AAverageConditional(this.white_performance_F[year][game], this.black_performance_F[year][game]);
						// Message to 'whiteAdvantage_rep_rep' from Plus factor
						this.whiteAdvantage_rep_rep_B[year][game] = DoublePlusOp.BAverageConditional(this.white_delta_B[year][game], this.vdouble28_F[year][game]);
					}
					// Message to 'whiteAdvantage_rep_rep' from Replicate factor
					this.whiteAdvantage_rep_rep_B_toDef[year] = ReplicateOp_Divide.ToDef<Gaussian>(this.whiteAdvantage_rep_rep_B[year], this.whiteAdvantage_rep_rep_B_toDef[year]);
					// Message to 'skill_depth1' from Replicate factor
					this.skill_depth1_B[year] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_B[year]);
					for(int player = 0; player<10; player++) {
						// Message to 'skill_uses' from Copy factor
						this.skill_uses_B[year][player][1] = ArrayHelper.SetTo<Gaussian>(this.skill_uses_B[year][player][1], this.skill_depth1_B[year][player]);
						if (year>0) {
							// Message to 'skill_uses' from Replicate factor
							this.skill_uses_F[year][player][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[year][player], this.skill_year_player_0__F[year][player], 0, this.skill_uses_F[year][player][0]);
							if (!this.isFirstYear[year][player]) {
								// Message to 'drawMargin_year_player_0__player_1_' from Gaussian factor
								this.drawMargin_year_player_0__player_1__F[year][player] = GaussianOpBase.SampleAverageConditional(this.drawMargin_uses_F[year-1][player][0], this.DrawMarginChangePrecision);
								// Message to 'drawMargin_year_player_0_' from Copy factor
								this.drawMargin_year_player_0__F[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_year_player_0__F[year][player], this.drawMargin_year_player_0__player_1__F[year][player]);
							}
							// Message to 'drawMargin_uses' from Replicate factor
							this.drawMargin_uses_F[year][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[year][player], this.drawMargin_year_player_0__F[year][player], 1, this.drawMargin_uses_F[year][player][1]);
						}
						// Message to 'drawMargin_depth1' from Copy factor
						this.drawMargin_depth1_F[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_depth1_F[year][player], this.drawMargin_uses_F[year][player][1]);
					}
					// Message to 'whiteAdvantage_rep_rep' from Replicate factor
					this.whiteAdvantage_rep_rep_F_marginal[year] = ReplicateOp_Divide.Marginal<Gaussian>(this.whiteAdvantage_rep_rep_B_toDef[year], this.whiteAdvantage_rep_F[year], this.whiteAdvantage_rep_rep_F_marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'whiteAdvantage_rep_rep' from Replicate factor
						this.whiteAdvantage_rep_rep_F[year][game] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.whiteAdvantage_rep_rep_B[year][game], this.whiteAdvantage_rep_rep_F_marginal[year], game, this.whiteAdvantage_rep_rep_F[year][game]);
						// Message to 'white_delta' from Plus factor
						this.white_delta_F[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble28_F[year][game], this.whiteAdvantage_rep_rep_F[year][game]);
						if (this.Outcome[year][game]==0) {
							// Message to 'vdouble30' from Plus factor
							this.vdouble30_F[year][game] = DoublePlusOp.SumAverageConditional(this.white_delta_F[year][game], this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
							// Message to 'vdouble30' from IsPositive factor
							this.vdouble30_B[year][game] = IsPositiveOp_Proper.XAverageConditional(this.vbool4_B[year][game], this.vdouble30_F[year][game]);
							// Message to 'white_drawMargin_0_' from Plus factor
							this.white_drawMargin_0__B[year][game] = DoublePlusOp.BAverageConditional(this.vdouble30_B[year][game], this.white_delta_F[year][game]);
							// Message to 'white_drawMargin' from Copy factor
							this.white_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_drawMargin_B[year][game], this.white_drawMargin_0__B[year][game]);
						}
					}
					// Message to 'drawMargin_depth1_uses' from GetItems factor
					this.drawMargin_depth1_uses_B[year][0] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.white_drawMargin_B[year], this.WhitePlayer[year], this.drawMargin_depth1_uses_B[year][0]);
					// Message to 'drawMargin_depth1_uses' from Replicate factor
					this.drawMargin_depth1_uses_F[year][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_F[year], 1, this.drawMargin_depth1_uses_F[year][1]);
					// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
					this.drawMargin_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.drawMargin_depth1_uses_F[year][1], this.drawMargin_depth1_uses_B[year][1], this.drawMargin_depth1_uses_F_year__1__marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
						this.drawMargin_itemblackPlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.black_drawMargin_B[year][game], this.drawMargin_depth1_uses_F[year][1], this.drawMargin_depth1_uses_F_year__1__marginal[year], this.BlackPlayer[year], game, this.drawMargin_itemblackPlayer_year__game__F[year][game]);
						if (this.Outcome[year][game]==1) {
							// Message to 'white_delta_1_' from IsBetween factor
							this.true_logZ[year][game] = DoubleIsBetweenOp.LogZ(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
							// Message to 'black_drawMargin_1_' from IsBetween factor
							black_drawMargin_1__B[year][game] = DoubleIsBetweenOp.UpperBoundAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
							// Message to 'black_drawMargin' from Copy factor
							this.black_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.black_drawMargin_B[year][game], black_drawMargin_1__B[year][game]);
						}
						if (this.Outcome[year][game]==2) {
							// Message to 'vdouble34' from Difference factor
							this.vdouble34_F[year][game] = DoublePlusOp.AAverageConditional(this.white_delta_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
							// Message to 'vdouble34' from IsPositive factor
							this.vdouble34_B[year][game] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.vdouble34_F[year][game]);
							// Message to 'black_drawMargin_2_' from Difference factor
							this.black_drawMargin_2__B[year][game] = DoublePlusOp.BAverageConditional(this.white_delta_F[year][game], this.vdouble34_B[year][game]);
							// Message to 'black_drawMargin' from Copy factor
							this.black_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.black_drawMargin_B[year][game], this.black_drawMargin_2__B[year][game]);
							// Message to 'white_delta_2_' from Difference factor
							this.white_delta_2__B[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble34_B[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
							// Message to 'white_delta' from Copy factor
							this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_2__B[year][game]);
						}
					}
					// Message to 'drawMargin_depth1_uses' from GetItems factor
					this.drawMargin_depth1_uses_B[year][1] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.black_drawMargin_B[year], this.BlackPlayer[year], this.drawMargin_depth1_uses_B[year][1]);
					// Message to 'drawMargin_depth1_uses' from Replicate factor
					this.drawMargin_depth1_uses_F[year][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_F[year], 0, this.drawMargin_depth1_uses_F[year][0]);
					// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
					this.drawMargin_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.drawMargin_depth1_uses_F[year][0], this.drawMargin_depth1_uses_B[year][0], this.drawMargin_depth1_uses_F_year__0__marginal[year]);
					for(int game = 0; game<this.NGames[year]; game++) {
						// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
						this.drawMargin_itemwhitePlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.white_drawMargin_B[year][game], this.drawMargin_depth1_uses_F[year][0], this.drawMargin_depth1_uses_F_year__0__marginal[year], this.WhitePlayer[year], game, this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
						if (this.Outcome[year][game]==0) {
							// Message to 'white_delta_0_' from Plus factor
							this.white_delta_0__B[year][game] = DoublePlusOp.AAverageConditional(this.vdouble30_B[year][game], this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
							// Message to 'white_delta' from Copy factor
							this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_0__B[year][game]);
						}
						if (this.Outcome[year][game]==1) {
							// Message to 'vdouble33' from Difference factor
							this.vdouble33_F[year][game] = DoublePlusOp.AAverageConditional(0.0, this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
							// Message to 'white_delta_1_' from IsBetween factor
							this.true_logZ[year][game] = DoubleIsBetweenOp.LogZ(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
							// Message to 'white_delta_1_' from IsBetween factor
							this.white_delta_1__B[year][game] = DoubleIsBetweenOp.XAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
							// Message to 'white_delta' from Copy factor
							this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_1__B[year][game]);
							// Message to 'vdouble33' from IsBetween factor
							this.vdouble33_B[year][game] = DoubleIsBetweenOp.LowerBoundAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
							// Message to 'white_drawMargin_1_' from Difference factor
							this.white_drawMargin_1__B[year][game] = DoublePlusOp.BAverageConditional(0.0, this.vdouble33_B[year][game]);
							// Message to 'white_drawMargin' from Copy factor
							this.white_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_drawMargin_B[year][game], this.white_drawMargin_1__B[year][game]);
						}
						// Message to 'vdouble28' from Plus factor
						this.vdouble28_B[year][game] = DoublePlusOp.AAverageConditional(this.white_delta_B[year][game], this.whiteAdvantage_rep_rep_F[year][game]);
						// Message to 'white_performance_use' from Difference factor
						this.white_performance_use_B[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble28_B[year][game], this.black_performance_F[year][game]);
					}
					// Message to 'drawMargin_depth1' from Replicate factor
					this.drawMargin_depth1_B[year] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_B[year]);
					for(int player = 0; player<10; player++) {
						// Message to 'drawMargin_uses' from Copy factor
						this.drawMargin_uses_B[year][player][1] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_uses_B[year][player][1], this.drawMargin_depth1_B[year][player]);
						if (year==0) {
							// Message to 'drawMargin_uses' from Replicate factor
							this.drawMargin_uses_F[0][player][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[0][player], this.drawMargin_0_player_0__F_reduced[year], 0, this.drawMargin_uses_F[0][player][0]);
						}
						if (year>0) {
							// Message to 'drawMargin_uses' from Replicate factor
							this.drawMargin_uses_F[year][player][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[year][player], this.drawMargin_year_player_0__F[year][player], 0, this.drawMargin_uses_F[year][player][0]);
						}
					}
				}
				// Message to 'whiteAdvantage_rep' from Replicate factor
				this.whiteAdvantage_rep_B_toDef = ReplicateOp_Divide.ToDef<Gaussian>(this.whiteAdvantage_rep_rep_B_toDef, this.whiteAdvantage_rep_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'whiteAdvantage_marginal' from Variable factor
			this.whiteAdvantage_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(this.whiteAdvantage_rep_B_toDef, this.vGaussian1, this.whiteAdvantage_marginal_F);
			// Create array for 'skill_marginal' Forwards messages.
			this.skill_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				// Create array for 'skill_marginal' Forwards messages.
				this.skill_marginal_F[year] = new DistributionStructArray<Gaussian,double>(10);
				for(int player = 0; player<10; player++) {
					this.skill_marginal_F[year][player] = Gaussian.Uniform();
				}
			}
			for(int year = 0; year<10; year++) { // broken
				if (year==0) {
					for(int player = 0; player<10; player++) {
						// Message to 'skill_use' from Replicate factor
						this.skill_use_B[0][player] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.skill_uses_B[0][player], this.skill_use_B[0][player]);
					}
					year = 10-1;
				}
			}
			for(int year = 0; year<10; year++) { // broken
				if (year==0) {
					for(int player = 0; player<10; player++) {
						// Message to 'skill_marginal' from DerivedVariable factor
						this.skill_marginal_F[0][player] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.skill_use_B[0][player], this.vGaussian2, this.skill_marginal_F[0][player]);
					}
					year = 10-1;
				}
			}
			// Create array for 'drawMargin_marginal' Forwards messages.
			this.drawMargin_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) { // broken
				if (year==0) {
					for(int player = 0; player<10; player++) {
						// Message to 'drawMargin_use' from Replicate factor
						this.drawMargin_use_B[0][player] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.drawMargin_uses_B[0][player], this.drawMargin_use_B[0][player]);
					}
					year = 10-1;
				}
			}
			for(int year = 0; year<10; year++) {
				// Create array for 'drawMargin_marginal' Forwards messages.
				this.drawMargin_marginal_F[year] = new DistributionStructArray<Gaussian,double>(10);
				for(int player = 0; player<10; player++) {
					this.drawMargin_marginal_F[year][player] = Gaussian.Uniform();
					if (year==0) {
						// Message to 'drawMargin_marginal' from DerivedVariable factor
						this.drawMargin_marginal_F[0][player] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.drawMargin_use_B[0][player], this.drawMargin_0_player_0__F_reduced[year], this.drawMargin_marginal_F[0][player]);
					}
					if (year>0) {
						// Message to 'drawMargin_marginal' from DerivedVariable factor
						this.drawMargin_marginal_F[year][player] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.drawMargin_use_B[year][player], this.drawMargin_year_player_0__F[year][player], this.drawMargin_marginal_F[year][player]);
						// Message to 'skill_marginal' from DerivedVariable factor
						this.skill_marginal_F[year][player] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.skill_use_B[year][player], this.skill_year_player_0__F[year][player], this.skill_marginal_F[year][player]);
					}
				}
			}
			this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and firstYear and nGames and numberOfIterationsDecreased and outcome and must reset on changes to performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27(bool initialise)
		{
			if (this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone&&((!initialise)||this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isInitialised)) {
				return ;
			}
			for(int year = 10-1; year>=0; year--) {
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
					this.drawMargin_itemblackPlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.black_drawMargin_B[year][game], this.drawMargin_depth1_uses_F[year][1], this.drawMargin_depth1_uses_F_year__1__marginal[year], this.BlackPlayer[year], game, this.drawMargin_itemblackPlayer_year__game__F[year][game]);
				}
			}
			this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = true;
			this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and firstYear and nGames and numberOfIterationsDecreased and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		private void Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28()
		{
			if (this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone) {
				return ;
			}
			for(int year = 10-1; year>=0; year--) {
				// Message to 'whiteAdvantage_rep_rep' from Replicate factor
				this.whiteAdvantage_rep_rep_F_marginal[year] = ReplicateOp_Divide.Marginal<Gaussian>(this.whiteAdvantage_rep_rep_B_toDef[year], this.whiteAdvantage_rep_F[year], this.whiteAdvantage_rep_rep_F_marginal[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'whiteAdvantage_rep_rep' from Replicate factor
					this.whiteAdvantage_rep_rep_F[year][game] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.whiteAdvantage_rep_rep_B[year][game], this.whiteAdvantage_rep_rep_F_marginal[year], game, this.whiteAdvantage_rep_rep_F[year][game]);
					// Message to 'white_delta' from Plus factor
					this.white_delta_F[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble28_F[year][game], this.whiteAdvantage_rep_rep_F[year][game]);
					if (this.Outcome[year][game]==2) {
						// Message to 'vdouble34' from Difference factor
						this.vdouble34_F[year][game] = DoublePlusOp.AAverageConditional(this.white_delta_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
						// Message to 'vdouble34' from IsPositive factor
						this.vdouble34_B[year][game] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.vdouble34_F[year][game]);
						// Message to 'black_drawMargin_2_' from Difference factor
						this.black_drawMargin_2__B[year][game] = DoublePlusOp.BAverageConditional(this.white_delta_F[year][game], this.vdouble34_B[year][game]);
						// Message to 'black_drawMargin' from Copy factor
						this.black_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.black_drawMargin_B[year][game], this.black_drawMargin_2__B[year][game]);
					}
				}
				// Message to 'drawMargin_depth1_uses' from GetItems factor
				this.drawMargin_depth1_uses_B[year][1] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.black_drawMargin_B[year], this.BlackPlayer[year], this.drawMargin_depth1_uses_B[year][1]);
				// Message to 'drawMargin_depth1_uses' from Replicate factor
				this.drawMargin_depth1_uses_F[year][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_F[year], 0, this.drawMargin_depth1_uses_F[year][0]);
				// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
				this.drawMargin_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.drawMargin_depth1_uses_F[year][0], this.drawMargin_depth1_uses_B[year][0], this.drawMargin_depth1_uses_F_year__0__marginal[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
					this.drawMargin_itemwhitePlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.white_drawMargin_B[year][game], this.drawMargin_depth1_uses_F[year][0], this.drawMargin_depth1_uses_F_year__0__marginal[year], this.WhitePlayer[year], game, this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
					if (this.Outcome[year][game]==0) {
						// Message to 'vdouble30' from Plus factor
						this.vdouble30_F[year][game] = DoublePlusOp.SumAverageConditional(this.white_delta_F[year][game], this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
						// Message to 'vdouble30' from IsPositive factor
						this.vdouble30_B[year][game] = IsPositiveOp_Proper.XAverageConditional(this.vbool4_B[year][game], this.vdouble30_F[year][game]);
						// Message to 'white_delta_0_' from Plus factor
						this.white_delta_0__B[year][game] = DoublePlusOp.AAverageConditional(this.vdouble30_B[year][game], this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
						// Message to 'white_delta' from Copy factor
						this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_0__B[year][game]);
					}
					if (this.Outcome[year][game]==1) {
						// Message to 'vdouble33' from Difference factor
						this.vdouble33_F[year][game] = DoublePlusOp.AAverageConditional(0.0, this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
						// Message to 'white_delta_1_' from IsBetween factor
						this.true_logZ[year][game] = DoubleIsBetweenOp.LogZ(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
						// Message to 'white_delta_1_' from IsBetween factor
						this.white_delta_1__B[year][game] = DoubleIsBetweenOp.XAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
						// Message to 'white_delta' from Copy factor
						this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_1__B[year][game]);
					}
					if (this.Outcome[year][game]==2) {
						// Message to 'white_delta_2_' from Difference factor
						this.white_delta_2__B[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble34_B[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
						// Message to 'white_delta' from Copy factor
						this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_2__B[year][game]);
					}
					// Message to 'vdouble28' from Plus factor
					this.vdouble28_B[year][game] = DoublePlusOp.AAverageConditional(this.white_delta_B[year][game], this.whiteAdvantage_rep_rep_F[year][game]);
					// Message to 'white_performance_use' from Difference factor
					this.white_performance_use_B[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble28_B[year][game], this.black_performance_F[year][game]);
					// Message to 'skill_itemwhitePlayer_year__game_' from Gaussian factor
					this.skill_itemwhitePlayer_year__game__B[year][game] = GaussianOpBase.MeanAverageConditional(this.white_performance_use_B[year][game], this.PerformancePrecision);
				}
				// Message to 'skill_depth1_uses' from GetItems factor
				this.skill_depth1_uses_B[year][0] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.skill_itemwhitePlayer_year__game__B[year], this.WhitePlayer[year], this.skill_depth1_uses_B[year][0]);
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'black_performance_use' from Difference factor
					this.black_performance_use_B[year][game] = DoublePlusOp.BAverageConditional(this.white_performance_F[year][game], this.vdouble28_B[year][game]);
					// Message to 'skill_itemblackPlayer_year__game_' from Gaussian factor
					this.skill_itemblackPlayer_year__game__B[year][game] = GaussianOpBase.MeanAverageConditional(this.black_performance_use_B[year][game], this.PerformancePrecision);
				}
				// Message to 'skill_depth1_uses' from GetItems factor
				this.skill_depth1_uses_B[year][1] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.skill_itemblackPlayer_year__game__B[year], this.BlackPlayer[year], this.skill_depth1_uses_B[year][1]);
				// Message to 'skill_depth1' from Replicate factor
				this.skill_depth1_B[year] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_B[year]);
				for(int player = 0; player<10; player++) {
					// Message to 'skill_uses' from Copy factor
					this.skill_uses_B[year][player][1] = ArrayHelper.SetTo<Gaussian>(this.skill_uses_B[year][player][1], this.skill_depth1_B[year][player]);
					if (year>0) {
						// Message to 'skill_use' from Replicate factor
						this.skill_use_B[year][player] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.skill_uses_B[year][player], this.skill_use_B[year][player]);
						if (!this.isFirstYear[year][player]) {
							// Message to 'skill_yearMinus1_player_0__player_1_' from Gaussian factor
							this.skill_yearMinus1_player_0__player_1__B[year][player] = GaussianOpBase.MeanAverageConditional(this.skill_use_B[year][player], this.SkillChangePrecision);
							// Message to 'skill_yearMinus1_player_0_' from Copy factor
							this.skill_yearMinus1_player_0__B[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_yearMinus1_player_0__B[year][player], this.skill_yearMinus1_player_0__player_1__B[year][player]);
						}
						// Message to 'skill_uses' from Copy factor
						this.skill_uses_B[year-1][player][0] = ArrayHelper.SetTo<Gaussian>(this.skill_uses_B[year-1][player][0], this.skill_yearMinus1_player_0__B[year][player]);
					}
				}
				for(int game = 0; game<this.NGames[year]; game++) {
					if (this.Outcome[year][game]==0) {
						// Message to 'white_drawMargin_0_' from Plus factor
						this.white_drawMargin_0__B[year][game] = DoublePlusOp.BAverageConditional(this.vdouble30_B[year][game], this.white_delta_F[year][game]);
						// Message to 'white_drawMargin' from Copy factor
						this.white_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_drawMargin_B[year][game], this.white_drawMargin_0__B[year][game]);
					}
					if (this.Outcome[year][game]==1) {
						// Message to 'vdouble33' from IsBetween factor
						this.vdouble33_B[year][game] = DoubleIsBetweenOp.LowerBoundAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
						// Message to 'white_drawMargin_1_' from Difference factor
						this.white_drawMargin_1__B[year][game] = DoublePlusOp.BAverageConditional(0.0, this.vdouble33_B[year][game]);
						// Message to 'white_drawMargin' from Copy factor
						this.white_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_drawMargin_B[year][game], this.white_drawMargin_1__B[year][game]);
					}
				}
				// Message to 'drawMargin_depth1_uses' from GetItems factor
				this.drawMargin_depth1_uses_B[year][0] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.white_drawMargin_B[year], this.WhitePlayer[year], this.drawMargin_depth1_uses_B[year][0]);
				// Message to 'drawMargin_depth1' from Replicate factor
				this.drawMargin_depth1_B[year] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_B[year]);
				for(int player = 0; player<10; player++) {
					// Message to 'drawMargin_uses' from Copy factor
					this.drawMargin_uses_B[year][player][1] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_uses_B[year][player][1], this.drawMargin_depth1_B[year][player]);
					if (year>0) {
						// Message to 'drawMargin_use' from Replicate factor
						this.drawMargin_use_B[year][player] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.drawMargin_uses_B[year][player], this.drawMargin_use_B[year][player]);
						if (!this.isFirstYear[year][player]) {
							// Message to 'drawMargin_yearMinus1_player_0__player_1_' from Gaussian factor
							this.drawMargin_yearMinus1_player_0__player_1__B[year][player] = GaussianOpBase.MeanAverageConditional(this.drawMargin_use_B[year][player], this.DrawMarginChangePrecision);
							// Message to 'drawMargin_yearMinus1_player_0_' from Copy factor
							this.drawMargin_yearMinus1_player_0__B[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_yearMinus1_player_0__B[year][player], this.drawMargin_yearMinus1_player_0__player_1__B[year][player]);
						}
						// Message to 'drawMargin_uses' from Copy factor
						this.drawMargin_uses_B[year-1][player][0] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_uses_B[year-1][player][0], this.drawMargin_yearMinus1_player_0__B[year][player]);
					}
				}
			}
			for(int year = 0; year<10; year++) { // broken
				if (year==0) {
					for(int player = 0; player<10; player++) {
						// Message to 'skill_uses' from Replicate factor
						this.skill_uses_F[0][player][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[0][player], this.vGaussian2, 0, this.skill_uses_F[0][player][0]);
					}
					year = 10-1;
					year = 10-1;
				}
			}
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					if (year>0) {
						if (!this.isFirstYear[year][player]) {
							// Message to 'skill_year_player_0__player_1_' from Gaussian factor
							this.skill_year_player_0__player_1__F[year][player] = GaussianOpBase.SampleAverageConditional(this.skill_uses_F[year-1][player][0], this.SkillChangePrecision);
							// Message to 'skill_year_player_0_' from Copy factor
							this.skill_year_player_0__F[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_year_player_0__F[year][player], this.skill_year_player_0__player_1__F[year][player]);
						}
						// Message to 'skill_uses' from Replicate factor
						this.skill_uses_F[year][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[year][player], this.skill_year_player_0__F[year][player], 1, this.skill_uses_F[year][player][1]);
					}
				}
			}
			for(int year = 0; year<10; year++) { // broken
				if (year==0) {
					for(int player = 0; player<10; player++) {
						// Message to 'skill_uses' from Replicate factor
						this.skill_uses_F[0][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[0][player], this.vGaussian2, 1, this.skill_uses_F[0][player][1]);
					}
					year = 10-1;
					year = 10-1;
				}
			}
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					// Message to 'skill_depth1' from Copy factor
					this.skill_depth1_F[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_depth1_F[year][player], this.skill_uses_F[year][player][1]);
				}
				// Message to 'skill_depth1_uses' from Replicate factor
				this.skill_depth1_uses_F[year][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_F[year], 0, this.skill_depth1_uses_F[year][0]);
				// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
				this.skill_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_depth1_uses_F[year][0], this.skill_depth1_uses_B[year][0], this.skill_depth1_uses_F_year__0__marginal[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
					this.skill_itemwhitePlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_itemwhitePlayer_year__game__B[year][game], this.skill_depth1_uses_F[year][0], this.skill_depth1_uses_F_year__0__marginal[year], this.WhitePlayer[year], game, this.skill_itemwhitePlayer_year__game__F[year][game]);
					// Message to 'white_performance' from Gaussian factor
					this.white_performance_F[year][game] = GaussianOpBase.SampleAverageConditional(this.skill_itemwhitePlayer_year__game__F[year][game], this.PerformancePrecision);
				}
				// Message to 'skill_depth1_uses' from Replicate factor
				this.skill_depth1_uses_F[year][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_F[year], 1, this.skill_depth1_uses_F[year][1]);
				// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
				this.skill_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_depth1_uses_F[year][1], this.skill_depth1_uses_B[year][1], this.skill_depth1_uses_F_year__1__marginal[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
					this.skill_itemblackPlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_itemblackPlayer_year__game__B[year][game], this.skill_depth1_uses_F[year][1], this.skill_depth1_uses_F_year__1__marginal[year], this.BlackPlayer[year], game, this.skill_itemblackPlayer_year__game__F[year][game]);
					// Message to 'black_performance' from Gaussian factor
					this.black_performance_F[year][game] = GaussianOpBase.SampleAverageConditional(this.skill_itemblackPlayer_year__game__F[year][game], this.PerformancePrecision);
					// Message to 'vdouble28' from Difference factor
					this.vdouble28_F[year][game] = DoublePlusOp.AAverageConditional(this.white_performance_F[year][game], this.black_performance_F[year][game]);
				}
				for(int player = 0; player<10; player++) {
					if (year>0) {
						// Message to 'drawMargin_uses' from Replicate factor
						this.drawMargin_uses_F[year][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[year][player], this.drawMargin_year_player_0__F[year][player], 1, this.drawMargin_uses_F[year][player][1]);
					}
					// Message to 'drawMargin_depth1' from Copy factor
					this.drawMargin_depth1_F[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_depth1_F[year][player], this.drawMargin_uses_F[year][player][1]);
				}
				// Message to 'drawMargin_depth1_uses' from Replicate factor
				this.drawMargin_depth1_uses_F[year][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_F[year], 1, this.drawMargin_depth1_uses_F[year][1]);
				// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
				this.drawMargin_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.drawMargin_depth1_uses_F[year][1], this.drawMargin_depth1_uses_B[year][1], this.drawMargin_depth1_uses_F_year__1__marginal[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
					this.drawMargin_itemblackPlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.black_drawMargin_B[year][game], this.drawMargin_depth1_uses_F[year][1], this.drawMargin_depth1_uses_F_year__1__marginal[year], this.BlackPlayer[year], game, this.drawMargin_itemblackPlayer_year__game__F[year][game]);
				}
				// Message to 'whiteAdvantage_rep_rep' from Replicate factor
				this.whiteAdvantage_rep_rep_F_marginal[year] = ReplicateOp_Divide.Marginal<Gaussian>(this.whiteAdvantage_rep_rep_B_toDef[year], this.whiteAdvantage_rep_F[year], this.whiteAdvantage_rep_rep_F_marginal[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'whiteAdvantage_rep_rep' from Replicate factor
					this.whiteAdvantage_rep_rep_F[year][game] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.whiteAdvantage_rep_rep_B[year][game], this.whiteAdvantage_rep_rep_F_marginal[year], game, this.whiteAdvantage_rep_rep_F[year][game]);
					// Message to 'white_delta' from Plus factor
					this.white_delta_F[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble28_F[year][game], this.whiteAdvantage_rep_rep_F[year][game]);
					if (this.Outcome[year][game]==2) {
						// Message to 'vdouble34' from Difference factor
						this.vdouble34_F[year][game] = DoublePlusOp.AAverageConditional(this.white_delta_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
						// Message to 'vdouble34' from IsPositive factor
						this.vdouble34_B[year][game] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.vdouble34_F[year][game]);
						// Message to 'black_drawMargin_2_' from Difference factor
						this.black_drawMargin_2__B[year][game] = DoublePlusOp.BAverageConditional(this.white_delta_F[year][game], this.vdouble34_B[year][game]);
						// Message to 'black_drawMargin' from Copy factor
						this.black_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.black_drawMargin_B[year][game], this.black_drawMargin_2__B[year][game]);
					}
				}
				// Message to 'drawMargin_depth1_uses' from GetItems factor
				this.drawMargin_depth1_uses_B[year][1] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.black_drawMargin_B[year], this.BlackPlayer[year], this.drawMargin_depth1_uses_B[year][1]);
				// Message to 'drawMargin_depth1_uses' from Replicate factor
				this.drawMargin_depth1_uses_F[year][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_F[year], 0, this.drawMargin_depth1_uses_F[year][0]);
				// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
				this.drawMargin_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.drawMargin_depth1_uses_F[year][0], this.drawMargin_depth1_uses_B[year][0], this.drawMargin_depth1_uses_F_year__0__marginal[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
					this.drawMargin_itemwhitePlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.white_drawMargin_B[year][game], this.drawMargin_depth1_uses_F[year][0], this.drawMargin_depth1_uses_F_year__0__marginal[year], this.WhitePlayer[year], game, this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
					if (this.Outcome[year][game]==1) {
						// Message to 'vdouble33' from Difference factor
						this.vdouble33_F[year][game] = DoublePlusOp.AAverageConditional(0.0, this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
						// Message to 'white_delta_1_' from IsBetween factor
						this.true_logZ[year][game] = DoubleIsBetweenOp.LogZ(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
						// Message to 'vdouble33' from IsBetween factor
						this.vdouble33_B[year][game] = DoubleIsBetweenOp.LowerBoundAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
						// Message to 'white_drawMargin_1_' from Difference factor
						this.white_drawMargin_1__B[year][game] = DoublePlusOp.BAverageConditional(0.0, this.vdouble33_B[year][game]);
						// Message to 'white_drawMargin' from Copy factor
						this.white_drawMargin_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_drawMargin_B[year][game], this.white_drawMargin_1__B[year][game]);
					}
					if (this.Outcome[year][game]==0) {
						// Message to 'vdouble30' from Plus factor
						this.vdouble30_F[year][game] = DoublePlusOp.SumAverageConditional(this.white_delta_F[year][game], this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
						// Message to 'vdouble30' from IsPositive factor
						this.vdouble30_B[year][game] = IsPositiveOp_Proper.XAverageConditional(this.vbool4_B[year][game], this.vdouble30_F[year][game]);
						// Message to 'white_delta_0_' from Plus factor
						this.white_delta_0__B[year][game] = DoublePlusOp.AAverageConditional(this.vdouble30_B[year][game], this.drawMargin_itemwhitePlayer_year__game__F[year][game]);
						// Message to 'white_delta' from Copy factor
						this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_0__B[year][game]);
					}
					if (this.Outcome[year][game]==1) {
						// Message to 'white_delta_1_' from IsBetween factor
						this.white_delta_1__B[year][game] = DoubleIsBetweenOp.XAverageConditional(Bernoulli.PointMass(true), this.white_delta_F[year][game], this.vdouble33_F[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game], this.true_logZ[year][game]);
						// Message to 'white_delta' from Copy factor
						this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_1__B[year][game]);
					}
					if (this.Outcome[year][game]==2) {
						// Message to 'white_delta_2_' from Difference factor
						this.white_delta_2__B[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble34_B[year][game], this.drawMargin_itemblackPlayer_year__game__F[year][game]);
						// Message to 'white_delta' from Copy factor
						this.white_delta_B[year][game] = ArrayHelper.SetTo<Gaussian>(this.white_delta_B[year][game], this.white_delta_2__B[year][game]);
					}
					// Message to 'vdouble28' from Plus factor
					this.vdouble28_B[year][game] = DoublePlusOp.AAverageConditional(this.white_delta_B[year][game], this.whiteAdvantage_rep_rep_F[year][game]);
					// Message to 'white_performance_use' from Difference factor
					this.white_performance_use_B[year][game] = DoublePlusOp.SumAverageConditional(this.vdouble28_B[year][game], this.black_performance_F[year][game]);
				}
			}
			this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of blackPlayer and firstYear and nGames and numberOfIterationsDecreased and must reset on changes to drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22(bool initialise)
		{
			if (this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isDone&&((!initialise)||this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised)) {
				return ;
			}
			for(int year = 10-1; year>=0; year--) {
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
					this.skill_itemblackPlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_itemblackPlayer_year__game__B[year][game], this.skill_depth1_uses_F[year][1], this.skill_depth1_uses_F_year__1__marginal[year], this.BlackPlayer[year], game, this.skill_itemblackPlayer_year__game__F[year][game]);
				}
			}
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isDone = true;
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of blackPlayer and firstYear and nGames and numberOfIterationsDecreased and performancePrecision and must reset on changes to drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and outcome and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23(bool initialise)
		{
			if (this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isDone&&((!initialise)||this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised)) {
				return ;
			}
			for(int year = 10-1; year>=0; year--) {
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'black_performance' from Gaussian factor
					this.black_performance_F[year][game] = GaussianOpBase.SampleAverageConditional(this.skill_itemblackPlayer_year__game__F[year][game], this.PerformancePrecision);
				}
			}
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isDone = true;
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of blackPlayer and firstYear and nGames and numberOfIterationsDecreased and performancePrecision and whitePlayer and must reset on changes to drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and outcome and skillChangePrecision</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24(bool initialise)
		{
			if (this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone&&((!initialise)||this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isInitialised)) {
				return ;
			}
			for(int year = 10-1; year>=0; year--) {
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'vdouble28' from Difference factor
					this.vdouble28_F[year][game] = DoublePlusOp.AAverageConditional(this.white_performance_F[year][game], this.black_performance_F[year][game]);
				}
			}
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone = true;
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of drawMarginChangePrecision</summary>
		private void Changed_drawMarginChangePrecision()
		{
			if (this.Changed_drawMarginChangePrecision_isDone) {
				return ;
			}
			this.drawMarginChangePrecision_marginal = Gamma.Uniform();
			this.drawMarginChangePrecision_marginal = Distribution.SetPoint<Gamma,double>(this.drawMarginChangePrecision_marginal, this.DrawMarginChangePrecision);
			this.Changed_drawMarginChangePrecision_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and firstYear and numberOfIterationsDecreased and must reset on changes to blackPlayer and nGames and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26(bool initialise)
		{
			if (this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isDone&&((!initialise)||this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised)) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					if (year>0) {
						if (!this.isFirstYear[year][player]) {
							// Message to 'drawMargin_year_player_0__player_1_' from Gaussian factor
							this.drawMargin_year_player_0__player_1__F[year][player] = GaussianOpBase.SampleAverageConditional(this.drawMargin_uses_F[year-1][player][0], this.DrawMarginChangePrecision);
							// Message to 'drawMargin_year_player_0_' from Copy factor
							this.drawMargin_year_player_0__F[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_year_player_0__F[year][player], this.drawMargin_year_player_0__player_1__F[year][player]);
						}
					}
				}
			}
			for(int year = 10-1; year>=0; year--) {
				for(int player = 0; player<10; player++) {
					if (year>0) {
						// Message to 'drawMargin_uses' from Replicate factor
						this.drawMargin_uses_F[year][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[year][player], this.drawMargin_year_player_0__F[year][player], 1, this.drawMargin_uses_F[year][player][1]);
					}
					// Message to 'drawMargin_depth1' from Copy factor
					this.drawMargin_depth1_F[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_depth1_F[year][player], this.drawMargin_uses_F[year][player][1]);
				}
				// Message to 'drawMargin_depth1_uses' from Replicate factor
				this.drawMargin_depth1_uses_F[year][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_B[year], this.drawMargin_depth1_F[year], 1, this.drawMargin_depth1_uses_F[year][1]);
				// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
				this.drawMargin_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.drawMargin_depth1_uses_F[year][1], this.drawMargin_depth1_uses_B[year][1], this.drawMargin_depth1_uses_F_year__1__marginal[year]);
			}
			this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isDone = true;
			this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of drawMarginMean</summary>
		private void Changed_drawMarginMean()
		{
			if (this.Changed_drawMarginMean_isDone) {
				return ;
			}
			this.drawMarginMean_marginal = Gaussian.Uniform();
			this.drawMarginMean_marginal = Distribution.SetPoint<Gaussian,double>(this.drawMarginMean_marginal, this.DrawMarginMean);
			this.Changed_drawMarginMean_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of drawMarginMean and drawMarginPrecision</summary>
		private void Changed_drawMarginMean_drawMarginPrecision()
		{
			if (this.Changed_drawMarginMean_drawMarginPrecision_isDone) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				if (year==0) {
					// Message to 'drawMargin_0_player_0_' from Gaussian factor
					this.drawMargin_0_player_0__F_reduced[year] = GaussianOpBase.SampleAverageConditional(this.DrawMarginMean, this.DrawMarginPrecision);
				}
			}
			this.Changed_drawMarginMean_drawMarginPrecision_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of drawMarginMean and drawMarginPrecision and firstYear</summary>
		private void Changed_drawMarginMean_drawMarginPrecision_firstYear()
		{
			if (this.Changed_drawMarginMean_drawMarginPrecision_firstYear_isDone) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					if (year>0) {
						if (this.isFirstYear[year][player]) {
							// Message to 'drawMargin_year_player_0__player_0_' from Gaussian factor
							this.drawMargin_year_player_0__player_0__F[year][player] = GaussianOpBase.SampleAverageConditional(this.DrawMarginMean, this.DrawMarginPrecision);
						}
					}
				}
			}
			this.Changed_drawMarginMean_drawMarginPrecision_firstYear_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of drawMarginMean and drawMarginPrecision and firstYear and numberOfIterationsDecreased and must reset on changes to blackPlayer and drawMarginChangePrecision and nGames and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19(bool initialise)
		{
			if (this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isDone&&((!initialise)||this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised)) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					if (year>0) {
						if (this.isFirstYear[year][player]) {
							// Message to 'drawMargin_year_player_0_' from Copy factor
							this.drawMargin_year_player_0__F[year][player] = ArrayHelper.SetTo<Gaussian>(this.drawMargin_year_player_0__F[year][player], this.drawMargin_year_player_0__player_0__F[year][player]);
						}
					}
				}
			}
			this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isDone = true;
			this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of drawMarginMean and drawMarginPrecision and numberOfIterationsDecreased and must reset on changes to blackPlayer and drawMarginChangePrecision and firstYear and nGames and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25(bool initialise)
		{
			if (this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isDone&&((!initialise)||this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised)) {
				return ;
			}
			for(int year = 10-1; year>=0; year--) {
				for(int player = 0; player<10; player++) {
					if (year==0) {
						// Message to 'drawMargin_uses' from Replicate factor
						this.drawMargin_uses_F[0][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[0][player], this.drawMargin_0_player_0__F_reduced[year], 1, this.drawMargin_uses_F[0][player][1]);
					}
				}
			}
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					if (year==0) {
						// Message to 'drawMargin_uses' from Replicate factor
						this.drawMargin_uses_F[0][player][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.drawMargin_uses_B[0][player], this.drawMargin_0_player_0__F_reduced[year], 0, this.drawMargin_uses_F[0][player][0]);
					}
				}
			}
			this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isDone = true;
			this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of drawMarginPrecision</summary>
		private void Changed_drawMarginPrecision()
		{
			if (this.Changed_drawMarginPrecision_isDone) {
				return ;
			}
			this.drawMarginPrecision_marginal = Gamma.Uniform();
			this.drawMarginPrecision_marginal = Distribution.SetPoint<Gamma,double>(this.drawMarginPrecision_marginal, this.DrawMarginPrecision);
			this.Changed_drawMarginPrecision_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of firstYear</summary>
		private void Changed_firstYear()
		{
			if (this.Changed_firstYear_isDone) {
				return ;
			}
			this.firstYear_marginal = new PointMass<int[]>(this.FirstYear);
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					if (year>0) {
						this.isFirstYear[year][player] = Factor.Not(year>this.FirstYear[player]);
					}
				}
				if (year>0) {
					// Create array for replicates of 'drawMargin_yearMinus1_player_0__player_1__B'
					this.drawMargin_yearMinus1_player_0__player_1__B[year] = new DistributionStructArray<Gaussian,double>(10);
					// Create array for replicates of 'drawMargin_year_player_0__player_0__F'
					this.drawMargin_year_player_0__player_0__F[year] = new DistributionStructArray<Gaussian,double>(10);
				}
				for(int player = 0; player<10; player++) {
					if (year>0) {
						if (this.isFirstYear[year][player]) {
							this.drawMargin_year_player_0__player_0__F[year][player] = Gaussian.Uniform();
						}
					}
				}
				if (year>0) {
					// Create array for replicates of 'drawMargin_year_player_0__player_1__F'
					this.drawMargin_year_player_0__player_1__F[year] = new DistributionStructArray<Gaussian,double>(10);
					// Create array for replicates of 'skill_yearMinus1_player_0__player_1__B'
					this.skill_yearMinus1_player_0__player_1__B[year] = new DistributionStructArray<Gaussian,double>(10);
					// Create array for replicates of 'skill_year_player_0__player_1__F'
					this.skill_year_player_0__player_1__F[year] = new DistributionStructArray<Gaussian,double>(10);
				}
			}
			this.Changed_firstYear_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of firstYear and nGames and numberOfIterationsDecreased and performancePrecision and whitePlayer and must reset on changes to blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and outcome and skillChangePrecision</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21(bool initialise)
		{
			if (this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isDone&&((!initialise)||this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised)) {
				return ;
			}
			for(int year = 10-1; year>=0; year--) {
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'white_performance' from Gaussian factor
					this.white_performance_F[year][game] = GaussianOpBase.SampleAverageConditional(this.skill_itemwhitePlayer_year__game__F[year][game], this.PerformancePrecision);
				}
			}
			this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isDone = true;
			this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of firstYear and nGames and numberOfIterationsDecreased and whitePlayer and must reset on changes to blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and outcome and performancePrecision and skillChangePrecision</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20(bool initialise)
		{
			if (this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isDone&&((!initialise)||this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised)) {
				return ;
			}
			for(int year = 10-1; year>=0; year--) {
				for(int game = 0; game<this.NGames[year]; game++) {
					// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
					this.skill_itemwhitePlayer_year__game__F[year][game] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_itemwhitePlayer_year__game__B[year][game], this.skill_depth1_uses_F[year][0], this.skill_depth1_uses_F_year__0__marginal[year], this.WhitePlayer[year], game, this.skill_itemwhitePlayer_year__game__F[year][game]);
				}
			}
			this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isDone = true;
			this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of firstYear and numberOfIterationsDecreased and must reset on changes to blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and nGames and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17(bool initialise)
		{
			if (this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isDone&&((!initialise)||this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised)) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					if (year>0) {
						if (!this.isFirstYear[year][player]) {
							this.drawMargin_yearMinus1_player_0__player_1__B[year][player] = Gaussian.Uniform();
						}
						this.drawMargin_yearMinus1_player_0__B[year][player] = Gaussian.Uniform();
						this.drawMargin_year_player_0__F[year][player] = Gaussian.Uniform();
						if (!this.isFirstYear[year][player]) {
							this.drawMargin_year_player_0__player_1__F[year][player] = Gaussian.Uniform();
							this.skill_yearMinus1_player_0__player_1__B[year][player] = Gaussian.Uniform();
						}
						this.skill_yearMinus1_player_0__B[year][player] = Gaussian.Uniform();
						this.skill_year_player_0__F[year][player] = Gaussian.Uniform();
						if (this.isFirstYear[year][player]) {
							// Message to 'skill_year_player_0_' from Copy factor
							this.skill_year_player_0__F[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_year_player_0__F[year][player], this.vGaussian2);
						}
						if (!this.isFirstYear[year][player]) {
							this.skill_year_player_0__player_1__F[year][player] = Gaussian.Uniform();
						}
					}
				}
			}
			for(int year = 10-1; year>=0; year--) {
				for(int player = 0; player<10; player++) {
					if (year>0) {
						// Message to 'skill_uses' from Replicate factor
						this.skill_uses_F[year][player][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.skill_uses_B[year][player], this.skill_year_player_0__F[year][player], 1, this.skill_uses_F[year][player][1]);
					}
					// Message to 'skill_depth1' from Copy factor
					this.skill_depth1_F[year][player] = ArrayHelper.SetTo<Gaussian>(this.skill_depth1_F[year][player], this.skill_uses_F[year][player][1]);
				}
				// Message to 'skill_depth1_uses' from Replicate factor
				this.skill_depth1_uses_F[year][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_F[year], 0, this.skill_depth1_uses_F[year][0]);
				// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
				this.skill_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_depth1_uses_F[year][0], this.skill_depth1_uses_B[year][0], this.skill_depth1_uses_F_year__0__marginal[year]);
				// Message to 'skill_depth1_uses' from Replicate factor
				this.skill_depth1_uses_F[year][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_B[year], this.skill_depth1_F[year], 1, this.skill_depth1_uses_F[year][1]);
				// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
				this.skill_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skill_depth1_uses_F[year][1], this.skill_depth1_uses_B[year][1], this.skill_depth1_uses_F_year__1__marginal[year]);
			}
			this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isDone = true;
			this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of nGames</summary>
		private void Changed_nGames()
		{
			if (this.Changed_nGames_isDone) {
				return ;
			}
			this.nGames_marginal = new PointMass<int[]>(this.NGames);
			for(int year = 0; year<10; year++) {
				// Create array for 'whiteAdvantage_rep_rep' Forwards messages.
				this.whiteAdvantage_rep_rep_F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_delta_F'
				this.white_delta_F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_drawMargin_B'
				this.white_drawMargin_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'black_drawMargin_B'
				this.black_drawMargin_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for 'drawMargin_itemblackPlayer_year__game_' Forwards messages.
				this.drawMargin_itemblackPlayer_year__game__F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for 'drawMargin_itemwhitePlayer_year__game_' Forwards messages.
				this.drawMargin_itemwhitePlayer_year__game__F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_delta_B'
				this.white_delta_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'vdouble28_B'
				this.vdouble28_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'black_performance_use_B'
				this.black_performance_use_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for 'skill_itemblackPlayer_year__game_' Backwards messages.
				this.skill_itemblackPlayer_year__game__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for 'skill_itemblackPlayer_year__game_' Forwards messages.
				this.skill_itemblackPlayer_year__game__F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'black_performance_F'
				this.black_performance_F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_performance_use_B'
				this.white_performance_use_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for 'skill_itemwhitePlayer_year__game_' Backwards messages.
				this.skill_itemwhitePlayer_year__game__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for 'skill_itemwhitePlayer_year__game_' Forwards messages.
				this.skill_itemwhitePlayer_year__game__F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_performance_F'
				this.white_performance_F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'vdouble28_F'
				this.vdouble28_F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for 'whiteAdvantage_rep_rep' Backwards messages.
				this.whiteAdvantage_rep_rep_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
			}
			this.Changed_nGames_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of nGames and numberOfIterationsDecreased and must reset on changes to blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and firstYear and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13(bool initialise)
		{
			if (this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isDone&&((!initialise)||this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised)) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				for(int game = 0; game<this.NGames[year]; game++) {
					this.whiteAdvantage_rep_rep_F[year][game] = Gaussian.Uniform();
					this.white_delta_F[year][game] = Gaussian.Uniform();
					this.drawMargin_itemblackPlayer_year__game__F[year][game] = Gaussian.Uniform();
					this.drawMargin_itemwhitePlayer_year__game__F[year][game] = Gaussian.Uniform();
					this.vdouble28_B[year][game] = Gaussian.Uniform();
					this.black_performance_use_B[year][game] = Gaussian.Uniform();
					this.skill_itemblackPlayer_year__game__B[year][game] = Gaussian.Uniform();
					this.skill_itemblackPlayer_year__game__F[year][game] = Gaussian.Uniform();
					this.black_performance_F[year][game] = Gaussian.Uniform();
					this.white_performance_use_B[year][game] = Gaussian.Uniform();
					this.skill_itemwhitePlayer_year__game__B[year][game] = Gaussian.Uniform();
					this.skill_itemwhitePlayer_year__game__F[year][game] = Gaussian.Uniform();
					this.white_performance_F[year][game] = Gaussian.Uniform();
					this.vdouble28_F[year][game] = Gaussian.Uniform();
					this.whiteAdvantage_rep_rep_B[year][game] = Gaussian.Uniform();
				}
			}
			this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isDone = true;
			this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of nGames and numberOfIterationsDecreased and outcome and must reset on changes to blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and firstYear and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16(bool initialise)
		{
			if (this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isDone&&((!initialise)||this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised)) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				for(int game = 0; game<this.NGames[year]; game++) {
					if (this.Outcome[year][game]==0) {
						this.vdouble30_F[year][game] = Gaussian.Uniform();
						this.vdouble30_B[year][game] = Gaussian.Uniform();
						this.white_drawMargin_0__B[year][game] = Gaussian.Uniform();
					}
					this.white_drawMargin_B[year][game] = Gaussian.Uniform();
					if (this.Outcome[year][game]==1) {
						this.vdouble33_F[year][game] = Gaussian.Uniform();
						this.true_logZ[year][game] = default(double);
					}
					this.black_drawMargin_B[year][game] = Gaussian.Uniform();
					if (this.Outcome[year][game]==2) {
						this.vdouble34_F[year][game] = Gaussian.Uniform();
						this.vdouble34_B[year][game] = Gaussian.Uniform();
						this.black_drawMargin_2__B[year][game] = Gaussian.Uniform();
					}
					if (this.Outcome[year][game]==1) {
						this.vdouble33_B[year][game] = Gaussian.Uniform();
						this.white_drawMargin_1__B[year][game] = Gaussian.Uniform();
					}
					if (this.Outcome[year][game]==0) {
						this.white_delta_0__B[year][game] = Gaussian.Uniform();
					}
					this.white_delta_B[year][game] = Gaussian.Uniform();
					if (this.Outcome[year][game]==1) {
						this.white_delta_1__B[year][game] = Gaussian.Uniform();
					}
					if (this.Outcome[year][game]==2) {
						this.white_delta_2__B[year][game] = Gaussian.Uniform();
					}
				}
			}
			this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isDone = true;
			this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of nGames and outcome</summary>
		private void Changed_nGames_outcome()
		{
			if (this.Changed_nGames_outcome_isDone) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				// Create array for replicates of 'vdouble30_F'
				this.vdouble30_F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'vbool4_B'
				this.vbool4_B[year] = new DistributionStructArray<Bernoulli,bool>(this.NGames[year]);
				for(int game = 0; game<this.NGames[year]; game++) {
					if (this.Outcome[year][game]==0) {
						this.vbool4_B[year][game] = Bernoulli.Uniform();
						// Message to 'vbool4' from Not factor
						this.vbool4_B[year][game] = BooleanNotOp.BAverageConditional(true);
					}
				}
				// Create array for replicates of 'vdouble30_B'
				this.vdouble30_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_drawMargin_0__B'
				this.white_drawMargin_0__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'vdouble33_F'
				this.vdouble33_F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'true_logZ'
				this.true_logZ[year] = new double[this.NGames[year]];
				// Create array for replicates of 'vdouble34_F'
				this.vdouble34_F[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'vdouble34_B'
				this.vdouble34_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'black_drawMargin_2__B'
				this.black_drawMargin_2__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'vdouble33_B'
				this.vdouble33_B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_drawMargin_1__B'
				this.white_drawMargin_1__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_delta_0__B'
				this.white_delta_0__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_delta_1__B'
				this.white_delta_1__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
				// Create array for replicates of 'white_delta_2__B'
				this.white_delta_2__B[year] = new DistributionStructArray<Gaussian,double>(this.NGames[year]);
			}
			// Create array for replicates of 'vbool5'
			bool[][] vbool5 = new bool[10][];
			for(int year = 0; year<10; year++) {
				// Create array for replicates of 'vbool5'
				vbool5[year] = new bool[this.NGames[year]];
				for(int game = 0; game<this.NGames[year]; game++) {
					if (this.Outcome[year][game]==0) {
						vbool5[year][game] = true;
						Constrain.Equal<bool>(true, vbool5[year][game]);
					}
				}
			}
			// Create array for replicates of 'vbool7'
			bool[][] vbool7 = new bool[10][];
			for(int year = 0; year<10; year++) {
				// Create array for replicates of 'vbool7'
				vbool7[year] = new bool[this.NGames[year]];
				for(int game = 0; game<this.NGames[year]; game++) {
					if (this.Outcome[year][game]==1) {
						vbool7[year][game] = true;
						Constrain.Equal<bool>(true, vbool7[year][game]);
					}
				}
			}
			// Create array for replicates of 'vbool9'
			bool[][] vbool9 = new bool[10][];
			for(int year = 0; year<10; year++) {
				// Create array for replicates of 'vbool9'
				vbool9[year] = new bool[this.NGames[year]];
				for(int game = 0; game<this.NGames[year]; game++) {
					if (this.Outcome[year][game]==2) {
						vbool9[year][game] = true;
						Constrain.Equal<bool>(true, vbool9[year][game]);
					}
				}
			}
			this.Changed_nGames_outcome_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to blackPlayer and drawMarginChangePrecision and drawMarginMean and drawMarginPrecision and firstYear and nGames and outcome and performancePrecision and skillChangePrecision and whitePlayer</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised)) {
				return ;
			}
			for(int year = 0; year<10; year++) {
				for(int player = 0; player<10; player++) {
					this.skill_depth1_uses_F[year][1][player] = Gaussian.Uniform();
					this.skill_depth1_uses_F[year][0][player] = Gaussian.Uniform();
				}
				// Message to 'skill_itemblackPlayer_year__game_' from GetItems factor
				this.skill_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_F[year][1]);
			}
			// Message to 'whiteAdvantage_rep' from Replicate factor
			this.whiteAdvantage_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gaussian>(this.vGaussian1);
			for(int year = 0; year<10; year++) {
				this.whiteAdvantage_rep_F[year] = Gaussian.Uniform();
				// Message to 'whiteAdvantage_rep_rep' from Replicate factor
				this.whiteAdvantage_rep_rep_F_marginal[year] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.whiteAdvantage_rep_F[year]);
				// Message to 'whiteAdvantage_rep_rep' from Replicate factor
				this.whiteAdvantage_rep_rep_B_toDef[year] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.whiteAdvantage_rep_F[year]);
				for(int player = 0; player<10; player++) {
					this.drawMargin_depth1_uses_F[year][1][player] = Gaussian.Uniform();
					this.drawMargin_depth1_uses_F[year][0][player] = Gaussian.Uniform();
				}
				// Message to 'drawMargin_itemblackPlayer_year__game_' from GetItems factor
				this.drawMargin_depth1_uses_F_year__1__marginal[year] = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_F[year][1]);
				for(int player = 0; player<10; player++) {
					this.drawMargin_depth1_uses_B[year][1][player] = Gaussian.Uniform();
					this.drawMargin_depth1_uses_B[year][0][player] = Gaussian.Uniform();
					this.drawMargin_depth1_B[year][player] = Gaussian.Uniform();
					this.drawMargin_uses_B[year][player][1] = Gaussian.Uniform();
					this.drawMargin_uses_B[year][player][0] = Gaussian.Uniform();
					this.drawMargin_use_B[year][player] = Gaussian.Uniform();
					this.drawMargin_uses_F[year][player][1] = Gaussian.Uniform();
					this.drawMargin_uses_F[year][player][0] = Gaussian.Uniform();
					this.drawMargin_depth1_F[year][player] = Gaussian.Uniform();
				}
				// Message to 'drawMargin_itemwhitePlayer_year__game_' from GetItems factor
				this.drawMargin_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.drawMargin_depth1_uses_F[year][0]);
				for(int player = 0; player<10; player++) {
					this.skill_depth1_uses_B[year][1][player] = Gaussian.Uniform();
					this.skill_depth1_uses_B[year][0][player] = Gaussian.Uniform();
					this.skill_depth1_B[year][player] = Gaussian.Uniform();
					this.skill_uses_B[year][player][1] = Gaussian.Uniform();
					this.skill_uses_B[year][player][0] = Gaussian.Uniform();
					this.skill_use_B[year][player] = Gaussian.Uniform();
					this.skill_uses_F[year][player][1] = Gaussian.Uniform();
					this.skill_uses_F[year][player][0] = Gaussian.Uniform();
					this.skill_depth1_F[year][player] = Gaussian.Uniform();
				}
				// Message to 'skill_itemwhitePlayer_year__game_' from GetItems factor
				this.skill_depth1_uses_F_year__0__marginal[year] = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.skill_depth1_uses_F[year][0]);
			}
			// Message to 'whiteAdvantage_rep' from Replicate factor
			this.whiteAdvantage_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gaussian>(this.vGaussian1);
			// Message to 'whiteAdvantage_rep' from Replicate factor
			this.whiteAdvantage_rep_F_marginal = ReplicateOp_Divide.Marginal<Gaussian>(this.whiteAdvantage_rep_B_toDef, this.vGaussian1, this.whiteAdvantage_rep_F_marginal);
			for(int year = 0; year<10; year++) {
				// Message to 'whiteAdvantage_rep' from Replicate factor
				this.whiteAdvantage_rep_F[year] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.whiteAdvantage_rep_rep_B_toDef[year], this.whiteAdvantage_rep_F_marginal, year, this.whiteAdvantage_rep_F[year]);
			}
			this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of outcome</summary>
		private void Changed_outcome()
		{
			if (this.Changed_outcome_isDone) {
				return ;
			}
			this.outcome_marginal = new PointMass<int[][]>(this.Outcome);
			this.Changed_outcome_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of performancePrecision</summary>
		private void Changed_performancePrecision()
		{
			if (this.Changed_performancePrecision_isDone) {
				return ;
			}
			this.performancePrecision_marginal = Gamma.Uniform();
			this.performancePrecision_marginal = Distribution.SetPoint<Gamma,double>(this.performancePrecision_marginal, this.PerformancePrecision);
			this.Changed_performancePrecision_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of skillChangePrecision</summary>
		private void Changed_skillChangePrecision()
		{
			if (this.Changed_skillChangePrecision_isDone) {
				return ;
			}
			this.skillChangePrecision_marginal = Gamma.Uniform();
			this.skillChangePrecision_marginal = Distribution.SetPoint<Gamma,double>(this.skillChangePrecision_marginal, this.SkillChangePrecision);
			this.Changed_skillChangePrecision_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of whitePlayer</summary>
		private void Changed_whitePlayer()
		{
			if (this.Changed_whitePlayer_isDone) {
				return ;
			}
			this.whitePlayer_marginal = new PointMass<int[][]>(this.WhitePlayer);
			this.Changed_whitePlayer_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vGaussian1 = Gaussian.FromNatural(0.0, 2.5E-05);
			this.vGaussian2 = Gaussian.FromNatural(0.0018750000000000001, 1.5625E-06);
			// Create array for replicates of 'isFirstYear'
			this.isFirstYear = new bool[10][];
			for(int year = 0; year<10; year++) {
				if (year>0) {
					// Create array for replicates of 'isFirstYear'
					this.isFirstYear[year] = new bool[10];
				}
			}
			// Create array for 'skill_depth1_uses' Forwards messages.
			this.skill_depth1_uses_F = new DistributionStructArray<Gaussian,double>[10][];
			for(int year = 0; year<10; year++) {
				// Create array for 'skill_depth1_uses' Forwards messages.
				this.skill_depth1_uses_F[year] = new DistributionStructArray<Gaussian,double>[2];
				// Create array for 'skill_depth1_uses' Forwards messages.
				this.skill_depth1_uses_F[year][1] = new DistributionStructArray<Gaussian,double>(10);
				// Create array for 'skill_depth1_uses' Forwards messages.
				this.skill_depth1_uses_F[year][0] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for replicates of 'skill_depth1_uses_F_year__1__marginal'
			this.skill_depth1_uses_F_year__1__marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for 'whiteAdvantage_rep' Forwards messages.
			this.whiteAdvantage_rep_F = new DistributionStructArray<Gaussian,double>(10);
			// Create array for replicates of 'whiteAdvantage_rep_rep_F_marginal'
			this.whiteAdvantage_rep_rep_F_marginal = new DistributionStructArray<Gaussian,double>(10);
			// Create array for replicates of 'whiteAdvantage_rep_rep_B_toDef'
			this.whiteAdvantage_rep_rep_B_toDef = new DistributionStructArray<Gaussian,double>(10);
			// Create array for replicates of 'whiteAdvantage_rep_rep_F'
			this.whiteAdvantage_rep_rep_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			this.drawMargin_0_player_0__F_reduced = new DistributionStructArray<Gaussian,double>(10);
			for(int year = 0; year<10; year++) {
				if (year==0) {
					this.drawMargin_0_player_0__F_reduced[year] = default(Gaussian);
					this.drawMargin_0_player_0__F_reduced[year] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'white_delta_F'
			this.white_delta_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'vdouble30_F'
			this.vdouble30_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'vbool4_B'
			this.vbool4_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(10);
			// Create array for replicates of 'vdouble30_B'
			this.vdouble30_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_drawMargin_0__B'
			this.white_drawMargin_0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_drawMargin_B'
			this.white_drawMargin_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for 'drawMargin_depth1_uses' Forwards messages.
			this.drawMargin_depth1_uses_F = new DistributionStructArray<Gaussian,double>[10][];
			for(int year = 0; year<10; year++) {
				// Create array for 'drawMargin_depth1_uses' Forwards messages.
				this.drawMargin_depth1_uses_F[year] = new DistributionStructArray<Gaussian,double>[2];
				// Create array for 'drawMargin_depth1_uses' Forwards messages.
				this.drawMargin_depth1_uses_F[year][1] = new DistributionStructArray<Gaussian,double>(10);
				// Create array for 'drawMargin_depth1_uses' Forwards messages.
				this.drawMargin_depth1_uses_F[year][0] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for replicates of 'drawMargin_depth1_uses_F_year__1__marginal'
			this.drawMargin_depth1_uses_F_year__1__marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'vdouble33_F'
			this.vdouble33_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'true_logZ'
			this.true_logZ = new double[10][];
			// Create array for replicates of 'black_drawMargin_B'
			this.black_drawMargin_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'vdouble34_F'
			this.vdouble34_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'vdouble34_B'
			this.vdouble34_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'black_drawMargin_2__B'
			this.black_drawMargin_2__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for 'drawMargin_depth1_uses' Backwards messages.
			this.drawMargin_depth1_uses_B = new DistributionStructArray<Gaussian,double>[10][];
			for(int year = 0; year<10; year++) {
				// Create array for 'drawMargin_depth1_uses' Backwards messages.
				this.drawMargin_depth1_uses_B[year] = new DistributionStructArray<Gaussian,double>[2];
				// Create array for 'drawMargin_depth1_uses' Backwards messages.
				this.drawMargin_depth1_uses_B[year][1] = new DistributionStructArray<Gaussian,double>(10);
				// Create array for 'drawMargin_depth1_uses' Backwards messages.
				this.drawMargin_depth1_uses_B[year][0] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for replicates of 'drawMargin_itemblackPlayer_year__game__F'
			this.drawMargin_itemblackPlayer_year__game__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'vdouble33_B'
			this.vdouble33_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_drawMargin_1__B'
			this.white_drawMargin_1__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for 'drawMargin_depth1' Backwards messages.
			this.drawMargin_depth1_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				// Create array for 'drawMargin_depth1' Backwards messages.
				this.drawMargin_depth1_B[year] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for 'drawMargin_uses' Backwards messages.
			this.drawMargin_uses_B = new Gaussian[10][][];
			for(int year = 0; year<10; year++) {
				// Create array for 'drawMargin_uses' Backwards messages.
				this.drawMargin_uses_B[year] = new Gaussian[10][];
				for(int player = 0; player<10; player++) {
					// Create array for 'drawMargin_uses' Backwards messages.
					this.drawMargin_uses_B[year][player] = new Gaussian[2];
				}
			}
			// Create array for 'drawMargin_use' Backwards messages.
			this.drawMargin_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				// Create array for 'drawMargin_use' Backwards messages.
				this.drawMargin_use_B[year] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for replicates of 'drawMargin_yearMinus1_player_0__player_1__B'
			this.drawMargin_yearMinus1_player_0__player_1__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'drawMargin_yearMinus1_player_0__B'
			this.drawMargin_yearMinus1_player_0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				if (year>0) {
					// Create array for 'drawMargin_yearMinus1_player_0_' Backwards messages.
					this.drawMargin_yearMinus1_player_0__B[year] = new DistributionStructArray<Gaussian,double>(10);
				}
			}
			// Create array for 'drawMargin_uses' Forwards messages.
			this.drawMargin_uses_F = new Gaussian[10][][];
			for(int year = 0; year<10; year++) {
				// Create array for 'drawMargin_uses' Forwards messages.
				this.drawMargin_uses_F[year] = new Gaussian[10][];
				for(int player = 0; player<10; player++) {
					// Create array for 'drawMargin_uses' Forwards messages.
					this.drawMargin_uses_F[year][player] = new Gaussian[2];
				}
			}
			// Create array for replicates of 'drawMargin_year_player_0__player_0__F'
			this.drawMargin_year_player_0__player_0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'drawMargin_year_player_0__F'
			this.drawMargin_year_player_0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				if (year>0) {
					// Create array for 'drawMargin_year_player_0_' Forwards messages.
					this.drawMargin_year_player_0__F[year] = new DistributionStructArray<Gaussian,double>(10);
				}
			}
			// Create array for replicates of 'drawMargin_year_player_0__player_1__F'
			this.drawMargin_year_player_0__player_1__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for 'drawMargin_depth1' Forwards messages.
			this.drawMargin_depth1_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				// Create array for 'drawMargin_depth1' Forwards messages.
				this.drawMargin_depth1_F[year] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for replicates of 'drawMargin_depth1_uses_F_year__0__marginal'
			this.drawMargin_depth1_uses_F_year__0__marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'drawMargin_itemwhitePlayer_year__game__F'
			this.drawMargin_itemwhitePlayer_year__game__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_delta_0__B'
			this.white_delta_0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_delta_B'
			this.white_delta_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_delta_1__B'
			this.white_delta_1__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_delta_2__B'
			this.white_delta_2__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'vdouble28_B'
			this.vdouble28_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'black_performance_use_B'
			this.black_performance_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'skill_itemblackPlayer_year__game__B'
			this.skill_itemblackPlayer_year__game__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for 'skill_depth1_uses' Backwards messages.
			this.skill_depth1_uses_B = new DistributionStructArray<Gaussian,double>[10][];
			for(int year = 0; year<10; year++) {
				// Create array for 'skill_depth1_uses' Backwards messages.
				this.skill_depth1_uses_B[year] = new DistributionStructArray<Gaussian,double>[2];
				// Create array for 'skill_depth1_uses' Backwards messages.
				this.skill_depth1_uses_B[year][1] = new DistributionStructArray<Gaussian,double>(10);
				// Create array for 'skill_depth1_uses' Backwards messages.
				this.skill_depth1_uses_B[year][0] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for replicates of 'skill_itemblackPlayer_year__game__F'
			this.skill_itemblackPlayer_year__game__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'black_performance_F'
			this.black_performance_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_performance_use_B'
			this.white_performance_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'skill_itemwhitePlayer_year__game__B'
			this.skill_itemwhitePlayer_year__game__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for 'skill_depth1' Backwards messages.
			this.skill_depth1_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				// Create array for 'skill_depth1' Backwards messages.
				this.skill_depth1_B[year] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for 'skill_uses' Backwards messages.
			this.skill_uses_B = new Gaussian[10][][];
			for(int year = 0; year<10; year++) {
				// Create array for 'skill_uses' Backwards messages.
				this.skill_uses_B[year] = new Gaussian[10][];
				for(int player = 0; player<10; player++) {
					// Create array for 'skill_uses' Backwards messages.
					this.skill_uses_B[year][player] = new Gaussian[2];
				}
			}
			// Create array for 'skill_use' Backwards messages.
			this.skill_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				// Create array for 'skill_use' Backwards messages.
				this.skill_use_B[year] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for replicates of 'skill_yearMinus1_player_0__player_1__B'
			this.skill_yearMinus1_player_0__player_1__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'skill_yearMinus1_player_0__B'
			this.skill_yearMinus1_player_0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				if (year>0) {
					// Create array for 'skill_yearMinus1_player_0_' Backwards messages.
					this.skill_yearMinus1_player_0__B[year] = new DistributionStructArray<Gaussian,double>(10);
				}
			}
			// Create array for 'skill_uses' Forwards messages.
			this.skill_uses_F = new Gaussian[10][][];
			for(int year = 0; year<10; year++) {
				// Create array for 'skill_uses' Forwards messages.
				this.skill_uses_F[year] = new Gaussian[10][];
				for(int player = 0; player<10; player++) {
					// Create array for 'skill_uses' Forwards messages.
					this.skill_uses_F[year][player] = new Gaussian[2];
				}
			}
			// Create array for replicates of 'skill_year_player_0__F'
			this.skill_year_player_0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				if (year>0) {
					// Create array for 'skill_year_player_0_' Forwards messages.
					this.skill_year_player_0__F[year] = new DistributionStructArray<Gaussian,double>(10);
				}
			}
			// Create array for replicates of 'skill_year_player_0__player_1__F'
			this.skill_year_player_0__player_1__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for 'skill_depth1' Forwards messages.
			this.skill_depth1_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int year = 0; year<10; year++) {
				// Create array for 'skill_depth1' Forwards messages.
				this.skill_depth1_F[year] = new DistributionStructArray<Gaussian,double>(10);
			}
			// Create array for replicates of 'skill_depth1_uses_F_year__0__marginal'
			this.skill_depth1_uses_F_year__0__marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'skill_itemwhitePlayer_year__game__F'
			this.skill_itemwhitePlayer_year__game__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'white_performance_F'
			this.white_performance_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'vdouble28_F'
			this.vdouble28_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'whiteAdvantage_rep_rep_B'
			this.whiteAdvantage_rep_rep_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'drawMarginChangePrecision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma DrawMarginChangePrecisionMarginal()
		{
			return this.drawMarginChangePrecision_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'drawMargin' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> DrawMarginMarginal()
		{
			return this.drawMargin_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'drawMarginMean' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian DrawMarginMeanMarginal()
		{
			return this.drawMarginMean_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'drawMarginPrecision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma DrawMarginPrecisionMarginal()
		{
			return this.drawMarginPrecision_marginal;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12_isDone = false;
					this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25_isDone = false;
					this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16_isDone = false;
					this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13_isDone = false;
					this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17_isDone = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22_isDone = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23_isDone = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20_isDone = false;
					this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21_isDone = false;
					this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24_isDone = false;
					this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19_isDone = false;
					this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27_isDone = false;
					this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28_isDone = false;
				}
				this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11_isDone = false;
			}
			this.Constant();
			this.Changed_nGames_outcome();
			this.Changed_drawMarginMean_drawMarginPrecision();
			this.Changed_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMa12(initialise);
			this.Changed_drawMarginMean_drawMarginPrecision_numberOfIterationsDecreased_Init_blackPlayer_drawMarginCh25(initialise);
			this.Changed_outcome();
			this.Changed_blackPlayer();
			this.Changed_whitePlayer();
			this.Changed_nGames();
			this.Changed_nGames_numberOfIterationsDecreased_outcome_Init_blackPlayer_drawMarginChangePrecision_drawMa16(initialise);
			this.Changed_nGames_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginMean13(initialise);
			this.Changed_firstYear();
			this.Changed_drawMarginMean_drawMarginPrecision_firstYear();
			this.Changed_firstYear_numberOfIterationsDecreased_Init_blackPlayer_drawMarginChangePrecision_drawMarginM17(initialise);
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_Init_drawMarginChangePrecision_draw22(initialise);
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_Init_drawMargi23(initialise);
			this.Changed_firstYear_nGames_numberOfIterationsDecreased_whitePlayer_Init_blackPlayer_drawMarginChangePr20(initialise);
			this.Changed_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_Init_blackPlay21(initialise);
			this.Changed_blackPlayer_firstYear_nGames_numberOfIterationsDecreased_performancePrecision_whitePlayer_In24(initialise);
			this.Changed_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDecreased_Init_blackPlayer_dr19(initialise);
			this.Changed_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_numberOfIterationsDec26(initialise);
			this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu27(initialise);
			this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu28();
			this.Changed_blackPlayer_drawMarginChangePrecision_drawMarginMean_drawMarginPrecision_firstYear_nGames_nu11(numberOfIterations);
			this.Changed_drawMarginChangePrecision();
			this.Changed_skillChangePrecision();
			this.Changed_performancePrecision();
			this.Changed_drawMarginPrecision();
			this.Changed_drawMarginMean();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>
		/// Returns the marginal distribution for 'firstYear' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> FirstYearMarginal()
		{
			return this.firstYear_marginal;
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="drawMarginMean") {
				return this.drawMarginMean;
			}
			if (variableName=="drawMarginPrecision") {
				return this.drawMarginPrecision;
			}
			if (variableName=="performancePrecision") {
				return this.performancePrecision;
			}
			if (variableName=="skillChangePrecision") {
				return this.skillChangePrecision;
			}
			if (variableName=="drawMarginChangePrecision") {
				return this.drawMarginChangePrecision;
			}
			if (variableName=="firstYear") {
				return this.firstYear;
			}
			if (variableName=="nGames") {
				return this.nGames;
			}
			if (variableName=="whitePlayer") {
				return this.whitePlayer;
			}
			if (variableName=="blackPlayer") {
				return this.blackPlayer;
			}
			if (variableName=="outcome") {
				return this.outcome;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="outcome") {
				return this.OutcomeMarginal();
			}
			if (variableName=="blackPlayer") {
				return this.BlackPlayerMarginal();
			}
			if (variableName=="whitePlayer") {
				return this.WhitePlayerMarginal();
			}
			if (variableName=="nGames") {
				return this.NGamesMarginal();
			}
			if (variableName=="firstYear") {
				return this.FirstYearMarginal();
			}
			if (variableName=="whiteAdvantage") {
				return this.WhiteAdvantageMarginal();
			}
			if (variableName=="skill") {
				return this.SkillMarginal();
			}
			if (variableName=="drawMargin") {
				return this.DrawMarginMarginal();
			}
			if (variableName=="drawMarginChangePrecision") {
				return this.DrawMarginChangePrecisionMarginal();
			}
			if (variableName=="skillChangePrecision") {
				return this.SkillChangePrecisionMarginal();
			}
			if (variableName=="performancePrecision") {
				return this.PerformancePrecisionMarginal();
			}
			if (variableName=="drawMarginPrecision") {
				return this.DrawMarginPrecisionMarginal();
			}
			if (variableName=="drawMarginMean") {
				return this.DrawMarginMeanMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'nGames' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> NGamesMarginal()
		{
			return this.nGames_marginal;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'outcome' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> OutcomeMarginal()
		{
			return this.outcome_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'performancePrecision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma PerformancePrecisionMarginal()
		{
			return this.performancePrecision_marginal;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="drawMarginMean") {
				this.drawMarginMean = (double)value;
				return ;
			}
			if (variableName=="drawMarginPrecision") {
				this.drawMarginPrecision = (double)value;
				return ;
			}
			if (variableName=="performancePrecision") {
				this.performancePrecision = (double)value;
				return ;
			}
			if (variableName=="skillChangePrecision") {
				this.skillChangePrecision = (double)value;
				return ;
			}
			if (variableName=="drawMarginChangePrecision") {
				this.drawMarginChangePrecision = (double)value;
				return ;
			}
			if (variableName=="firstYear") {
				this.firstYear = (int[])value;
				return ;
			}
			if (variableName=="nGames") {
				this.nGames = (int[])value;
				return ;
			}
			if (variableName=="whitePlayer") {
				this.whitePlayer = (int[][])value;
				return ;
			}
			if (variableName=="blackPlayer") {
				this.blackPlayer = (int[][])value;
				return ;
			}
			if (variableName=="outcome") {
				this.outcome = (int[][])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'skillChangePrecision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma SkillChangePrecisionMarginal()
		{
			return this.skillChangePrecision_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'skill' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SkillMarginal()
		{
			return this.skill_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'whiteAdvantage' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian WhiteAdvantageMarginal()
		{
			return this.whiteAdvantage_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'whitePlayer' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> WhitePlayerMarginal()
		{
			return this.whitePlayer_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
